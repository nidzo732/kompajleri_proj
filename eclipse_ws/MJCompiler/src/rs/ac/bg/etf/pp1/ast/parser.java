
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Dec 20 13:38:08 CET 2018
//----------------------------------------------------

package rs.ac.bg.etf.pp1.ast;

import rs.ac.bg.etf.pp1.Yylex;
import rs.ac.bg.etf.pp1.CompilerError;
import java_cup.runtime.Symbol;

/** CUP v0.10k generated parser.
  * @version Thu Dec 20 13:38:08 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\036\010\000\002\002\004\000\002\046" +
    "\003\000\002\044\003\000\002\060\003\000\002\055\003" +
    "\000\002\055\005\000\002\056\007\000\002\057\003\000" +
    "\002\057\005\000\002\051\007\000\002\053\003\000\002" +
    "\052\002\000\002\052\005\000\002\045\004\000\002\045" +
    "\004\000\002\035\002\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\040\004\000\002\040\002\000\002" +
    "\040\003\000\002\040\004\000\002\043\003\000\002\043" +
    "\003\000\002\042\002\000\002\041\004\000\002\041\005" +
    "\000\002\062\003\000\002\034\012\000\002\061\005\000" +
    "\002\061\002\000\002\033\002\000\002\033\004\000\002" +
    "\054\004\000\002\026\007\000\002\064\003\000\002\030" +
    "\003\000\002\030\004\000\002\027\005\000\002\027\002" +
    "\000\002\027\005\000\002\023\005\000\002\023\007\000" +
    "\002\022\006\000\002\022\005\000\002\022\004\000\002" +
    "\022\002\000\002\032\005\000\002\032\005\000\002\025" +
    "\004\000\002\025\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\024\003\000\002\024\005\000" +
    "\002\024\003\000\002\020\003\000\002\020\005\000\002" +
    "\020\007\000\002\020\011\000\002\020\007\000\002\020" +
    "\013\000\002\020\004\000\002\020\004\000\002\020\005" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\065\003\000\002" +
    "\067\003\000\002\066\003\000\002\014\003\000\002\014" +
    "\002\000\002\015\003\000\002\015\002\000\002\016\003" +
    "\000\002\016\002\000\002\063\003\000\002\063\003\000" +
    "\002\021\002\000\002\021\004\000\002\050\004\000\002" +
    "\050\004\000\002\017\005\000\002\017\004\000\002\017" +
    "\004\000\002\017\005\000\002\017\004\000\002\013\003" +
    "\000\002\013\005\000\002\011\003\000\002\011\005\000" +
    "\002\012\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\002\000\002\047\003\000\002\047\003\000\002\006" +
    "\003\000\002\006\005\000\002\006\005\000\002\005\003" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\037\006\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\004\000\002\003" +
    "\007\000\002\003\005\000\002\003\003\000\002\003\004" +
    "\000\002\004\003\000\002\004\005\000\002\004\006\000" +
    "\002\007\003\000\002\010\003\000\002\010\005\000\002" +
    "\010\002\000\002\070\006\000\002\071\006\000\002\072" +
    "\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\004\006\005\001\002\000\004\002\366\001" +
    "\002\000\004\025\007\001\002\000\020\003\ufff1\010\ufff1" +
    "\011\ufff1\013\ufff1\025\ufff1\027\ufff1\054\ufff1\001\002\000" +
    "\020\003\uffff\010\uffff\011\uffff\013\uffff\025\uffff\027\uffff" +
    "\054\uffff\001\002\000\020\003\020\010\024\011\021\013" +
    "\012\025\014\027\025\054\013\001\002\000\020\003\ufff0" +
    "\010\ufff0\011\ufff0\013\ufff0\025\ufff0\027\ufff0\054\ufff0\001" +
    "\002\000\004\025\354\001\002\000\010\020\uffdd\025\uffdd" +
    "\055\uffdd\001\002\000\054\003\uff76\025\uff76\030\uff76\031" +
    "\uff76\032\uff76\033\uff76\034\uff76\035\uff76\036\uff76\037\uff76" +
    "\040\uff76\041\uff76\042\uff76\043\uff76\044\uff76\050\uff76\051" +
    "\uff76\053\uff76\054\uff76\056\uff76\057\uff76\001\002\000\006" +
    "\050\347\051\346\001\002\000\020\003\uffef\010\uffef\011" +
    "\uffef\013\uffef\025\uffef\027\uffef\054\uffef\001\002\000\006" +
    "\003\101\025\102\001\002\000\004\050\344\001\002\000" +
    "\004\025\335\001\002\000\020\003\uffee\010\uffee\011\uffee" +
    "\013\uffee\025\uffee\027\uffee\054\uffee\001\002\000\006\050" +
    "\334\051\324\001\002\000\004\025\035\001\002\000\004" +
    "\025\014\001\002\000\004\025\027\001\002\000\004\045" +
    "\031\001\002\000\006\050\uffcc\051\uffcc\001\002\000\010" +
    "\004\032\005\033\026\034\001\002\000\006\050\uffc7\051" +
    "\uffc7\001\002\000\006\050\uffc8\051\uffc8\001\002\000\006" +
    "\050\uffc9\051\uffc9\001\002\000\012\003\ufffe\012\ufffe\023" +
    "\ufffe\054\ufffe\001\002\000\012\003\040\012\uffe9\023\037" +
    "\054\uffe9\001\002\000\006\003\332\025\333\001\002\000" +
    "\006\012\uffe8\054\uffe8\001\002\000\006\012\044\054\uffe4" +
    "\001\002\000\004\054\uffe5\001\002\000\004\054\052\001" +
    "\002\000\004\025\014\001\002\000\006\051\046\054\uffe6" +
    "\001\002\000\004\025\014\001\002\000\006\051\uffe2\054" +
    "\uffe2\001\002\000\006\051\uffe1\054\uffe1\001\002\000\006" +
    "\051\uffe3\054\uffe3\001\002\000\012\003\uffd5\025\uffd5\054" +
    "\uffd5\055\uffd5\001\002\000\012\003\331\025\014\054\uffd8" +
    "\055\uffd8\001\002\000\006\054\055\055\uffde\001\002\000" +
    "\010\020\uffdd\025\uffdd\055\uffdd\001\002\000\004\055\057" +
    "\001\002\000\020\003\uffe0\010\uffe0\011\uffe0\013\uffe0\025" +
    "\uffe0\027\uffe0\054\uffe0\001\002\000\010\020\065\025\014" +
    "\055\063\001\002\000\010\020\uffdc\025\uffdc\055\uffdc\001" +
    "\002\000\004\025\330\001\002\000\004\055\uffdf\001\002" +
    "\000\010\003\uffd5\025\uffd5\054\uffd5\001\002\000\004\025" +
    "\111\001\002\000\004\052\070\001\002\000\012\003\uffdb" +
    "\025\uffdb\050\uffdb\054\uffdb\001\002\000\012\003\071\025" +
    "\014\051\uffce\053\uffce\001\002\000\004\051\106\001\002" +
    "\000\006\003\101\025\102\001\002\000\006\051\074\053" +
    "\075\001\002\000\006\003\076\025\014\001\002\000\012" +
    "\003\uffd3\025\uffd3\050\uffd3\054\uffd3\001\002\000\006\051" +
    "\uffd0\053\uffd0\001\002\000\006\003\101\025\102\001\002" +
    "\000\006\051\uffd1\053\uffd1\001\002\000\010\050\uffc4\051" +
    "\uffc4\053\uffc4\001\002\000\012\050\uffc6\051\uffc6\053\uffc6" +
    "\056\103\001\002\000\004\057\104\001\002\000\010\050" +
    "\uffc5\051\uffc5\053\uffc5\001\002\000\006\051\uffcf\053\uffcf" +
    "\001\002\000\010\025\014\051\uffce\053\uffce\001\002\000" +
    "\006\051\074\053\110\001\002\000\012\003\uffd2\025\uffd2" +
    "\050\uffd2\054\uffd2\001\002\000\004\052\ufff2\001\002\000" +
    "\010\003\322\025\014\054\uffd9\001\002\000\004\054\114" +
    "\001\002\000\032\003\uffaa\007\uffaa\015\uffaa\017\uffaa\021" +
    "\uffaa\022\uffaa\024\uffaa\025\uffaa\054\uffaa\055\uffaa\061\uffaa" +
    "\062\uffaa\001\002\000\032\003\134\007\131\015\125\017" +
    "\124\021\140\022\123\024\117\025\120\054\126\055\122" +
    "\061\116\062\132\001\002\000\004\052\317\001\002\000" +
    "\004\050\316\001\002\000\062\003\uff79\030\uff79\031\uff79" +
    "\032\uff79\033\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040" +
    "\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79" +
    "\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79\056\uff79\057" +
    "\uff79\060\uff79\001\002\000\032\003\uffa9\007\uffa9\015\uffa9" +
    "\017\uffa9\021\uffa9\022\uffa9\024\uffa9\025\uffa9\054\uffa9\055" +
    "\uffa9\061\uffa9\062\uffa9\001\002\000\010\020\uffda\025\uffda" +
    "\055\uffda\001\002\000\004\052\uffb4\001\002\000\022\004" +
    "\152\005\146\016\147\025\120\026\150\031\145\050\313" +
    "\052\162\001\002\000\004\052\304\001\002\000\032\003" +
    "\uffaa\007\uffaa\015\uffaa\017\uffaa\021\uffaa\022\uffaa\024\uffaa" +
    "\025\uffaa\054\uffaa\055\uffaa\061\uffaa\062\uffaa\001\002\000" +
    "\004\050\301\001\002\000\020\003\252\045\255\046\254" +
    "\047\253\052\222\056\221\060\223\001\002\000\004\050" +
    "\300\001\002\000\004\052\272\001\002\000\004\050\271" +
    "\001\002\000\004\050\270\001\002\000\004\052\246\001" +
    "\002\000\004\050\245\001\002\000\004\050\244\001\002" +
    "\000\004\052\uffb3\001\002\000\004\050\243\001\002\000" +
    "\034\003\uffc3\007\uffc3\014\uffc3\015\uffc3\017\uffc3\021\uffc3" +
    "\022\uffc3\024\uffc3\025\uffc3\054\uffc3\055\uffc3\061\uffc3\062" +
    "\uffc3\001\002\000\004\052\144\001\002\000\022\003\155" +
    "\004\152\005\146\016\147\025\120\026\150\031\145\052" +
    "\162\001\002\000\020\004\152\005\146\016\147\025\120" +
    "\026\150\031\145\052\162\001\002\000\044\030\uff81\031" +
    "\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81" +
    "\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\050\uff81\051" +
    "\uff81\053\uff81\057\uff81\001\002\000\004\025\014\001\002" +
    "\000\044\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035" +
    "\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80" +
    "\044\uff80\050\uff80\051\uff80\053\uff80\057\uff80\001\002\000" +
    "\006\044\234\053\uffac\001\002\000\044\030\uff82\031\uff82" +
    "\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040" +
    "\uff82\041\uff82\042\uff82\043\uff82\044\uff82\050\uff82\051\uff82" +
    "\053\uff82\057\uff82\001\002\000\044\030\uff8a\031\uff8a\032" +
    "\175\033\176\034\174\035\uff8a\036\uff8a\037\uff8a\040\uff8a" +
    "\041\uff8a\042\uff8a\043\uff8a\044\uff8a\050\uff8a\051\uff8a\053" +
    "\uff8a\057\uff8a\001\002\000\052\030\uff7f\031\uff7f\032\uff7f" +
    "\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041" +
    "\uff7f\042\uff7f\043\uff7f\044\uff7f\050\uff7f\051\uff7f\052\222" +
    "\053\uff7f\056\221\057\uff7f\060\223\001\002\000\004\053" +
    "\uffab\001\002\000\044\030\uff87\031\uff87\032\uff87\033\uff87" +
    "\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042" +
    "\uff87\043\uff87\044\uff87\050\uff87\051\uff87\053\uff87\057\uff87" +
    "\001\002\000\012\043\217\044\uffa1\050\uffa1\053\uffa1\001" +
    "\002\000\032\030\171\031\172\035\203\036\207\037\204" +
    "\040\206\041\210\042\205\043\uff9d\044\uff9d\050\uff9d\053" +
    "\uff9d\001\002\000\012\043\uff9f\044\uff9f\050\uff9f\053\uff9f" +
    "\001\002\000\020\004\152\005\146\016\147\025\120\026" +
    "\150\031\145\052\162\001\002\000\004\053\165\001\002" +
    "\000\044\030\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035" +
    "\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b" +
    "\044\uff7b\050\uff7b\051\uff7b\053\uff7b\057\uff7b\001\002\000" +
    "\030\003\134\007\131\015\125\017\124\021\140\022\123" +
    "\024\117\025\120\054\126\061\116\062\132\001\002\000" +
    "\034\003\uffbf\007\uffbf\014\uffbf\015\uffbf\017\uffbf\021\uffbf" +
    "\022\uffbf\024\uffbf\025\uffbf\054\uffbf\055\uffbf\061\uffbf\062" +
    "\uffbf\001\002\000\010\030\171\031\172\053\170\001\002" +
    "\000\044\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035" +
    "\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\050\uff7c\051\uff7c\053\uff7c\057\uff7c\001\002\000" +
    "\020\004\152\005\146\016\147\025\120\026\150\031\145" +
    "\052\162\001\002\000\020\004\152\005\146\016\147\025" +
    "\120\026\150\031\145\052\162\001\002\000\044\030\uff88" +
    "\031\uff88\032\175\033\176\034\174\035\uff88\036\uff88\037" +
    "\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\050\uff88" +
    "\051\uff88\053\uff88\057\uff88\001\002\000\020\004\152\005" +
    "\146\016\147\025\120\026\150\031\145\052\162\001\002" +
    "\000\020\004\152\005\146\016\147\025\120\026\150\031" +
    "\145\052\162\001\002\000\020\004\152\005\146\016\147" +
    "\025\120\026\150\031\145\052\162\001\002\000\044\030" +
    "\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85" +
    "\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\050" +
    "\uff85\051\uff85\053\uff85\057\uff85\001\002\000\044\030\uff86" +
    "\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037" +
    "\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\050\uff86" +
    "\051\uff86\053\uff86\057\uff86\001\002\000\044\030\uff84\031" +
    "\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84" +
    "\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\050\uff84\051" +
    "\uff84\053\uff84\057\uff84\001\002\000\044\030\uff89\031\uff89" +
    "\032\175\033\176\034\174\035\uff89\036\uff89\037\uff89\040" +
    "\uff89\041\uff89\042\uff89\043\uff89\044\uff89\050\uff89\051\uff89" +
    "\053\uff89\057\uff89\001\002\000\020\004\152\005\146\016" +
    "\147\025\120\026\150\031\145\052\162\001\002\000\020" +
    "\004\152\005\146\016\147\025\120\026\150\031\145\052" +
    "\162\001\002\000\020\004\152\005\146\016\147\025\120" +
    "\026\150\031\145\052\162\001\002\000\020\004\152\005" +
    "\146\016\147\025\120\026\150\031\145\052\162\001\002" +
    "\000\020\004\152\005\146\016\147\025\120\026\150\031" +
    "\145\052\162\001\002\000\020\004\152\005\146\016\147" +
    "\025\120\026\150\031\145\052\162\001\002\000\016\030" +
    "\171\031\172\043\uff98\044\uff98\050\uff98\053\uff98\001\002" +
    "\000\016\030\171\031\172\043\uff9b\044\uff9b\050\uff9b\053" +
    "\uff9b\001\002\000\016\030\171\031\172\043\uff99\044\uff99" +
    "\050\uff99\053\uff99\001\002\000\016\030\171\031\172\043" +
    "\uff97\044\uff97\050\uff97\053\uff97\001\002\000\016\030\171" +
    "\031\172\043\uff9a\044\uff9a\050\uff9a\053\uff9a\001\002\000" +
    "\016\030\171\031\172\043\uff9c\044\uff9c\050\uff9c\053\uff9c" +
    "\001\002\000\020\004\152\005\146\016\147\025\120\026" +
    "\150\031\145\052\162\001\002\000\012\043\uff9e\044\uff9e" +
    "\050\uff9e\053\uff9e\001\002\000\020\004\152\005\146\016" +
    "\147\025\120\026\150\031\145\052\162\001\002\000\024" +
    "\004\152\005\146\016\147\025\120\026\150\031\145\051" +
    "\uff73\052\162\053\uff73\001\002\000\004\025\224\001\002" +
    "\000\062\003\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034" +
    "\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78" +
    "\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78\051" +
    "\uff78\052\uff78\053\uff78\056\uff78\057\uff78\060\uff78\001\002" +
    "\000\006\051\227\053\230\001\002\000\012\030\171\031" +
    "\172\051\uff75\053\uff75\001\002\000\020\004\152\005\146" +
    "\016\147\025\120\026\150\031\145\052\162\001\002\000" +
    "\044\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83" +
    "\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044" +
    "\uff83\050\uff83\051\uff83\053\uff83\057\uff83\001\002\000\012" +
    "\030\171\031\172\051\uff74\053\uff74\001\002\000\010\030" +
    "\171\031\172\057\233\001\002\000\062\003\uff77\030\uff77" +
    "\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036\uff77\037" +
    "\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045\uff77" +
    "\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77\056" +
    "\uff77\057\uff77\060\uff77\001\002\000\020\004\152\005\146" +
    "\016\147\025\120\026\150\031\145\052\162\001\002\000" +
    "\012\043\217\044\uffa0\050\uffa0\053\uffa0\001\002\000\046" +
    "\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036" +
    "\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e" +
    "\050\uff7e\051\uff7e\053\uff7e\056\237\057\uff7e\001\002\000" +
    "\020\004\152\005\146\016\147\025\120\026\150\031\145" +
    "\052\162\001\002\000\010\030\171\031\172\057\241\001" +
    "\002\000\044\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d" +
    "\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043" +
    "\uff7d\044\uff7d\050\uff7d\051\uff7d\053\uff7d\057\uff7d\001\002" +
    "\000\044\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035" +
    "\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a" +
    "\044\uff7a\050\uff7a\051\uff7a\053\uff7a\057\uff7a\001\002\000" +
    "\034\003\uffb7\007\uffb7\014\uffb7\015\uffb7\017\uffb7\021\uffb7" +
    "\022\uffb7\024\uffb7\025\uffb7\054\uffb7\055\uffb7\061\uffb7\062" +
    "\uffb7\001\002\000\034\003\uffb9\007\uffb9\014\uffb9\015\uffb9" +
    "\017\uffb9\021\uffb9\022\uffb9\024\uffb9\025\uffb9\054\uffb9\055" +
    "\uffb9\061\uffb9\062\uffb9\001\002\000\034\003\uffb8\007\uffb8" +
    "\014\uffb8\015\uffb8\017\uffb8\021\uffb8\022\uffb8\024\uffb8\025" +
    "\uffb8\054\uffb8\055\uffb8\061\uffb8\062\uffb8\001\002\000\006" +
    "\025\120\050\uffb1\001\002\000\004\050\260\001\002\000" +
    "\016\003\252\045\255\046\254\047\253\056\221\060\223" +
    "\001\002\000\004\050\uffb2\001\002\000\006\050\uffa2\053" +
    "\uffa2\001\002\000\006\050\uffa4\053\uffa4\001\002\000\006" +
    "\050\uffa5\053\uffa5\001\002\000\022\003\256\004\152\005" +
    "\146\016\147\025\120\026\150\031\145\052\162\001\002" +
    "\000\006\050\uffa3\053\uffa3\001\002\000\012\030\171\031" +
    "\172\050\uffa6\053\uffa6\001\002\000\022\004\152\005\146" +
    "\016\147\025\120\026\150\031\145\050\uffaf\052\162\001" +
    "\002\000\006\044\234\050\uffb0\001\002\000\004\050\263" +
    "\001\002\000\006\025\120\053\uffad\001\002\000\004\053" +
    "\uffae\001\002\000\004\053\266\001\002\000\030\003\134" +
    "\007\131\015\125\017\124\021\140\022\123\024\117\025" +
    "\120\054\126\061\116\062\132\001\002\000\034\003\uffbe" +
    "\007\uffbe\014\uffbe\015\uffbe\017\uffbe\021\uffbe\022\uffbe\024" +
    "\uffbe\025\uffbe\054\uffbe\055\uffbe\061\uffbe\062\uffbe\001\002" +
    "\000\034\003\uffa7\007\uffa7\014\uffa7\015\uffa7\017\uffa7\021" +
    "\uffa7\022\uffa7\024\uffa7\025\uffa7\054\uffa7\055\uffa7\061\uffa7" +
    "\062\uffa7\001\002\000\034\003\uffb6\007\uffb6\014\uffb6\015" +
    "\uffb6\017\uffb6\021\uffb6\022\uffb6\024\uffb6\025\uffb6\054\uffb6" +
    "\055\uffb6\061\uffb6\062\uffb6\001\002\000\020\004\152\005" +
    "\146\016\147\025\120\026\150\031\145\052\162\001\002" +
    "\000\012\030\171\031\172\051\274\053\275\001\002\000" +
    "\004\004\276\001\002\000\004\050\uff71\001\002\000\004" +
    "\053\277\001\002\000\004\050\uff70\001\002\000\034\003" +
    "\uffbd\007\uffbd\014\uffbd\015\uffbd\017\uffbd\021\uffbd\022\uffbd" +
    "\024\uffbd\025\uffbd\054\uffbd\055\uffbd\061\uffbd\062\uffbd\001" +
    "\002\000\034\003\uffa8\007\uffa8\014\uffa8\015\uffa8\017\uffa8" +
    "\021\uffa8\022\uffa8\024\uffa8\025\uffa8\054\uffa8\055\uffa8\061" +
    "\uffa8\062\uffa8\001\002\000\032\003\134\007\131\015\125" +
    "\017\124\021\140\022\123\024\117\025\120\054\126\055" +
    "\303\061\116\062\132\001\002\000\034\003\uffc2\007\uffc2" +
    "\014\uffc2\015\uffc2\017\uffc2\021\uffc2\022\uffc2\024\uffc2\025" +
    "\uffc2\054\uffc2\055\uffc2\061\uffc2\062\uffc2\001\002\000\022" +
    "\003\155\004\152\005\146\016\147\025\120\026\150\031" +
    "\145\052\162\001\002\000\004\053\306\001\002\000\030" +
    "\003\134\007\131\015\125\017\124\021\140\022\123\024" +
    "\117\025\120\054\126\061\116\062\132\001\002\000\034" +
    "\003\uffc1\007\uffc1\014\310\015\uffc1\017\uffc1\021\uffc1\022" +
    "\uffc1\024\uffc1\025\uffc1\054\uffc1\055\uffc1\061\uffc1\062\uffc1" +
    "\001\002\000\030\003\uffb5\007\uffb5\015\uffb5\017\uffb5\021" +
    "\uffb5\022\uffb5\024\uffb5\025\uffb5\054\uffb5\061\uffb5\062\uffb5" +
    "\001\002\000\030\003\134\007\131\015\125\017\124\021" +
    "\140\022\123\024\117\025\120\054\126\061\116\062\132" +
    "\001\002\000\034\003\uffc0\007\uffc0\014\uffc0\015\uffc0\017" +
    "\uffc0\021\uffc0\022\uffc0\024\uffc0\025\uffc0\054\uffc0\055\uffc0" +
    "\061\uffc0\062\uffc0\001\002\000\034\003\uffba\007\uffba\014" +
    "\uffba\015\uffba\017\uffba\021\uffba\022\uffba\024\uffba\025\uffba" +
    "\054\uffba\055\uffba\061\uffba\062\uffba\001\002\000\010\030" +
    "\171\031\172\050\315\001\002\000\034\003\uffbb\007\uffbb" +
    "\014\uffbb\015\uffbb\017\uffbb\021\uffbb\022\uffbb\024\uffbb\025" +
    "\uffbb\054\uffbb\055\uffbb\061\uffbb\062\uffbb\001\002\000\034" +
    "\003\uffbc\007\uffbc\014\uffbc\015\uffbc\017\uffbc\021\uffbc\022" +
    "\uffbc\024\uffbc\025\uffbc\054\uffbc\055\uffbc\061\uffbc\062\uffbc" +
    "\001\002\000\004\025\120\001\002\000\010\053\321\056" +
    "\221\060\223\001\002\000\004\050\uff72\001\002\000\004" +
    "\050\327\001\002\000\006\050\325\051\324\001\002\000" +
    "\006\003\101\025\102\001\002\000\012\003\uffd6\025\uffd6" +
    "\054\uffd6\055\uffd6\001\002\000\006\050\uffca\051\uffca\001" +
    "\002\000\012\003\uffd4\025\uffd4\054\uffd4\055\uffd4\001\002" +
    "\000\004\052\ufff3\001\002\000\010\050\327\054\uffd7\055" +
    "\uffd7\001\002\000\006\012\uffe7\054\uffe7\001\002\000\006" +
    "\012\uffea\054\uffea\001\002\000\020\003\uffec\010\uffec\011" +
    "\uffec\013\uffec\025\uffec\027\uffec\054\uffec\001\002\000\004" +
    "\054\ufff6\001\002\000\004\054\337\001\002\000\010\020" +
    "\ufff5\025\ufff5\055\ufff5\001\002\000\010\020\065\025\014" +
    "\055\341\001\002\000\020\003\ufff7\010\ufff7\011\ufff7\013" +
    "\ufff7\025\ufff7\027\ufff7\054\ufff7\001\002\000\004\050\343" +
    "\001\002\000\010\020\ufff4\025\ufff4\055\ufff4\001\002\000" +
    "\020\003\uffeb\010\uffeb\011\uffeb\013\uffeb\025\uffeb\027\uffeb" +
    "\054\uffeb\001\002\000\006\050\uffcb\051\uffcb\001\002\000" +
    "\004\025\027\001\002\000\020\003\uffed\010\uffed\011\uffed" +
    "\013\uffed\025\uffed\027\uffed\054\uffed\001\002\000\006\050" +
    "\uffcd\051\uffcd\001\002\000\010\020\065\025\014\055\352" +
    "\001\002\000\004\002\001\001\002\000\004\054\355\001" +
    "\002\000\004\054\ufffd\001\002\000\004\025\360\001\002" +
    "\000\006\051\363\055\364\001\002\000\006\051\ufff9\055" +
    "\ufff9\001\002\000\010\045\361\051\ufffc\055\ufffc\001\002" +
    "\000\004\004\362\001\002\000\006\051\ufffb\055\ufffb\001" +
    "\002\000\004\025\360\001\002\000\020\003\ufffa\010\ufffa" +
    "\011\ufffa\013\ufffa\025\ufffa\027\ufffa\054\ufffa\001\002\000" +
    "\006\051\ufff8\055\ufff8\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\004\036\003\001\001\000\002\001\001\000" +
    "\004\046\005\001\001\000\004\035\007\001\001\000\002" +
    "\001\001\000\016\007\016\025\022\032\014\034\010\051" +
    "\015\056\021\001\001\000\002\001\001\000\004\060\352" +
    "\001\001\000\004\033\350\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\344\001\001" +
    "\000\002\001\001\000\004\053\335\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\035\001\001\000\004" +
    "\007\025\001\001\000\004\031\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\041\044\042\041\043\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\047\062\050\001\001" +
    "\000\002\001\001\000\006\007\047\062\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\052\030\053\001\001\000\006\007\016\025\322\001" +
    "\001\000\004\061\055\001\001\000\004\033\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\061\026" +
    "\060\045\065\054\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\111\064\112\001" +
    "\001\000\002\001\001\000\004\023\066\001\001\000\002" +
    "\001\001\000\006\007\071\022\072\001\001\000\002\001" +
    "\001\000\004\024\104\001\001\000\002\001\001\000\004" +
    "\007\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\071\022\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\016\025\322\001\001\000\002\001\001\000\004\021\114" +
    "\001\001\000\026\004\127\017\126\020\120\037\136\050" +
    "\141\066\134\067\142\070\135\071\140\072\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\155\004\153\005\152\006\313\037\163\001\001\000" +
    "\002\001\001\000\004\021\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\155" +
    "\004\153\005\152\006\157\011\156\012\160\013\150\037" +
    "\163\063\162\001\001\000\010\003\241\004\153\037\163" +
    "\001\001\000\002\001\001\000\004\007\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\155\004\153\005\152\006\166\037\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\127" +
    "\017\126\020\165\037\136\050\141\066\134\067\142\070" +
    "\135\071\140\072\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\155\004\153\005" +
    "\201\037\163\001\001\000\012\003\155\004\153\005\172" +
    "\037\163\001\001\000\002\001\001\000\010\003\200\004" +
    "\153\037\163\001\001\000\010\003\177\004\153\037\163" +
    "\001\001\000\010\003\176\004\153\037\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\155\004\153\005\152\006\215\037" +
    "\163\001\001\000\014\003\155\004\153\005\152\006\214" +
    "\037\163\001\001\000\014\003\155\004\153\005\152\006" +
    "\213\037\163\001\001\000\014\003\155\004\153\005\152" +
    "\006\212\037\163\001\001\000\014\003\155\004\153\005" +
    "\152\006\211\037\163\001\001\000\014\003\155\004\153" +
    "\005\152\006\210\037\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\155\004\153\005" +
    "\152\006\157\012\217\037\163\001\001\000\002\001\001" +
    "\000\014\003\155\004\153\005\152\006\231\037\163\001" +
    "\001\000\016\003\155\004\153\005\152\006\225\010\224" +
    "\037\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\155\004\153" +
    "\005\152\006\230\037\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\155\004\153\005\152\006\157\011\234\012\160\037" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\155\004\153\005\152\006\237\037\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\247\014\246\017\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\155\004\153\005\152" +
    "\006\256\037\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\155\004\153\005\152\006\157\011\156" +
    "\012\160\013\260\015\261\037\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\247\016\264\017\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\127\017\126\020\266\037\136\050\141\066\134\067\142" +
    "\070\135\071\140\072\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\155\004\153" +
    "\005\152\006\272\037\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\127\017\126\020\120\037\136\050\141\066\134\067\142" +
    "\070\135\071\140\072\132\001\001\000\002\001\001\000" +
    "\024\003\155\004\153\005\152\006\157\011\156\012\160" +
    "\013\150\037\163\063\304\001\001\000\002\001\001\000" +
    "\026\004\127\017\126\020\306\037\136\050\141\066\134" +
    "\067\142\070\135\071\140\072\132\001\001\000\004\065" +
    "\310\001\001\000\002\001\001\000\026\004\127\017\126" +
    "\020\311\037\136\050\141\066\134\067\142\070\135\071" +
    "\140\072\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\337\001\001\000\010\007\061\045" +
    "\065\054\341\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\347\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\061\026\060\045\065\054\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\055\356\057\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\364\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean syntaxError=false;
    public boolean unrecoveredSyntaxError=false;
    @Override
    protected int error_sync_size()
    {
        return 3;
    }

    @Override
    public void syntax_error(Symbol cur_token)
    {
        syntaxError=true;
        CompilerError.raise("Syntax error ", ((Yylex)getScanner()).getLineNo(), ((Yylex)getScanner()).getColumn());
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        syntaxError=true;
        unrecoveredSyntaxError=true;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // printcallw ::= PRINT LPAREN expr COMA NUMBER RPAREN 
            {
              Printcallw RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int widthleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int widthright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		int width = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new PrintCallWidth(e1, width); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*printcallw*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // printcall ::= PRINT LPAREN expr RPAREN 
            {
              Printcall RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new PrintCallS(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*printcall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // readcall ::= READ LPAREN designator RPAREN 
            {
              Readcall RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ReadCallS(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*readcall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // actpars ::= 
            {
              Actpars RESULT = null;
		 RESULT=new EmptyParameters(); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*actpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // actpars ::= actpars COMA expr 
            {
              Actpars RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Actpars a1 = (Actpars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Parameters(a1, e2); RESULT.setLine(a1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*actpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // actpars ::= expr 
            {
              Actpars RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Parameter(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*actpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // type ::= IDENT 
            {
              Type RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Type(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // designator ::= designator LBRACK expr RBRACK 
            {
              Designator RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new IndexDesignator(d1, e2); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // designator ::= designator DOT IDENT 
            {
              Designator RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new PathDesignator(d1, name); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // designator ::= IDENT 
            {
              Designator RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new BaseDesignator(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // factor ::= MINUS factor 
            {
              Factor RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Factor f1 = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Negated(f1); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // factor ::= call 
            {
              Factor RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Call c1 = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new CallResult(c1); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // factor ::= LPAREN expr RPAREN 
            {
              Factor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Parenthesized(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // factor ::= NEW type LBRACK expr RBRACK 
            {
              Factor RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int countleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int countright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr count = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new NewArray(t1, count); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // factor ::= NEW type 
            {
              Factor RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NewObject(t1); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // factor ::= designator 
            {
              Factor RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleFactor(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // factor ::= BOOL 
            {
              Factor RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		boolean val = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new BooleanConstant(val); RESULT.setLine(valleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // factor ::= CHARACTER 
            {
              Factor RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new CharacterConstant(val); RESULT.setLine(valleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // factor ::= NUMBER 
            {
              Factor RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int val = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NumericConstant(val); RESULT.setLine(valleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // call ::= designator LPAREN actpars RPAREN 
            {
              Call RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Actpars a2 = (Actpars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new FuncCall(d1, a2); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*call*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // term ::= term MOD factor 
            {
              Term RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Factor f2 = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Modulus(t1, f2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // term ::= term DIVIDE factor 
            {
              Term RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Factor f2 = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Division(t1, f2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // term ::= term STAR factor 
            {
              Term RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Factor f2 = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Multiplication(t1, f2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // term ::= factor 
            {
              Term RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Factor f1 = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleTerm(f1); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr ::= expr MINUS term 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Substraction(e1, t2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr ::= expr PLUS term 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Addition(e1, t2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr ::= term 
            {
              Expr RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleExpr(t1); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // errsep ::= COMA 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived12(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // errsep ::= IDENT 
            {
              Errsep RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ErrsepDerived11(I1); RESULT.setLine(I1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // errsep ::= 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived10(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // errsep ::= INCREMENT 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived9(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // errsep ::= DECREMENT 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived8(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // errsep ::= LESSEQUAL 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived7(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // errsep ::= LESS 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived6(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // errsep ::= GREATEREQUAL 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived5(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // errsep ::= GREATER 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived4(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // errsep ::= EQUALS 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived3(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // errsep ::= AND 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived2(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // errsep ::= OR 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived1(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // condfactor ::= expr LESSEQUAL expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new LessEqual(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // condfactor ::= expr LESS expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Less(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // condfactor ::= expr GREATEREQUAL expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new GreaterEqual(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // condfactor ::= expr GREATER expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Greater(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // condfactor ::= expr NOTEQUALS expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NotEquals(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // condfactor ::= expr EQUALS expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Equals(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // condfactor ::= expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleCondFactor(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // condterm ::= condterm AND condfactor 
            {
              Condterm RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condterm c1 = (Condterm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condfactor c2 = (Condfactor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new And(c1, c2); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*condterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // condterm ::= condfactor 
            {
              Condterm RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condfactor c1 = (Condfactor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleCondTerm(c1); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*condterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // condexpr ::= condexpr OR condterm 
            {
              Condexpr RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condexpr c1 = (Condexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condterm c2 = (Condterm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Or(c1, c2); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*condexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // condexpr ::= condterm 
            {
              Condexpr RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condterm c1 = (Condterm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleCondExpr(c1); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*condexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // designatorstmt ::= designator error 
            {
              Designatorstmt RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new DesignatorstmtDerived2(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*designatorstmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // designatorstmt ::= designator ASSIGN error 
            {
              Designatorstmt RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new DesignatorstmtDerived1(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*designatorstmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // designatorstmt ::= designator DECREMENT 
            {
              Designatorstmt RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Decrement(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*designatorstmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // designatorstmt ::= designator INCREMENT 
            {
              Designatorstmt RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Increment(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*designatorstmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // designatorstmt ::= designator ASSIGN expr 
            {
              Designatorstmt RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Assign(d1, e2); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*designatorstmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // designatorline ::= error SEMICOLON 
            {
              Designatorline RESULT = null;
		 RESULT=new DesignatorlineDerived2(); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*designatorline*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // designatorline ::= designatorstmt SEMICOLON 
            {
              Designatorline RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Designatorstmt d1 = (Designatorstmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new DesignatorlineDerived1(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*designatorline*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // statementblock ::= statementblock statement 
            {
              Statementblock RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statementblock s1 = (Statementblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new StmtBlock(s1, s2); RESULT.setLine(s1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*statementblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // statementblock ::= 
            {
              Statementblock RESULT = null;
		 RESULT=new EmptyBlock(); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*statementblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // jmpcond ::= error 
            {
              Jmpcond RESULT = null;
		 RESULT=new JmpcondDerived1(); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*jmpcond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // jmpcond ::= condexpr 
            {
              Jmpcond RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condexpr cond = (Condexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new JmpCondition(cond); RESULT.setLine(condleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*jmpcond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // for3 ::= 
            {
              For3 RESULT = null;
		 RESULT=new ForIncrementEmpty(); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*for3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // for3 ::= designatorstmt 
            {
              For3 RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Designatorstmt d1 = (Designatorstmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ForIncrement(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*for3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // for2 ::= 
            {
              For2 RESULT = null;
		 RESULT=new ForCondEmpty(); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*for2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for2 ::= condexpr 
            {
              For2 RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condexpr c1 = (Condexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ForCond(c1); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*for2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // for1 ::= 
            {
              For1 RESULT = null;
		 RESULT=new ForInitEmpty(); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*for1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // for1 ::= designatorstmt 
            {
              For1 RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Designatorstmt d1 = (Designatorstmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ForInit(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*for1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // forwrapper ::= FOR 
            {
              Forwrapper RESULT = null;
		 RESULT=new ForWrap(); 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*forwrapper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // whilewrapper ::= WHILE 
            {
              Whilewrapper RESULT = null;
		 RESULT=new WhileWrap(); 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*whilewrapper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // elsewrapper ::= ELSE 
            {
              Elsewrapper RESULT = null;
		 RESULT=new ElseWrap(); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*elsewrapper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement ::= printcallw SEMICOLON 
            {
              Statement RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Printcallw p1 = (Printcallw)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new PrintStatementW(p1); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement ::= printcall SEMICOLON 
            {
              Statement RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Printcall p1 = (Printcall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new PrintStatement(p1); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement ::= readcall SEMICOLON 
            {
              Statement RESULT = null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Readcall r1 = (Readcall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ReadStatement(r1); RESULT.setLine(r1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement ::= call SEMICOLON 
            {
              Statement RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Call c1 = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new CallStatement(c1); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement ::= RETURN SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new EmptyReturn(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement ::= RETURN expr SEMICOLON 
            {
              Statement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Return(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= CONTINUE SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new Continue(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= BREAK SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new Break(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= forwrapper LPAREN for1 SEMICOLON for2 SEMICOLON for3 RPAREN statement 
            {
              Statement RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Forwrapper f1 = (Forwrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		For1 f2 = (For1)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int f3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int f3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		For2 f3 = (For2)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int f4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		For3 f4 = (For3)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s5 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ForLoop(f1, f2, f3, f4, s5); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= whilewrapper LPAREN jmpcond RPAREN statement 
            {
              Statement RESULT = null;
		int w1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Whilewrapper w1 = (Whilewrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Jmpcond cond = (Jmpcond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new While(w1, cond, s2); RESULT.setLine(w1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= IF LPAREN jmpcond RPAREN statement elsewrapper statement 
            {
              Statement RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Jmpcond cond = (Jmpcond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Elsewrapper e2 = (Elsewrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s3 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new IfElse(cond, s1, e2, s3); RESULT.setLine(condleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= IF LPAREN jmpcond RPAREN statement 
            {
              Statement RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Jmpcond cond = (Jmpcond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new If(cond, s1); RESULT.setLine(condleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= LBRACE statementblock RBRACE 
            {
              Statement RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statementblock s1 = (Statementblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Block(s1); RESULT.setLine(s1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= designatorline 
            {
              Statement RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Designatorline d1 = (Designatorline)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new DesignatorLineStmt(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // namedeclaration ::= error 
            {
              Namedeclaration RESULT = null;
		 RESULT=new NamedeclarationDerived1(); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*namedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // namedeclaration ::= IDENT LBRACK RBRACK 
            {
              Namedeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new Array(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*namedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // namedeclaration ::= IDENT 
            {
              Namedeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Variable(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*namedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // constnamedeclaration ::= IDENT ASSIGN NUMBER 
            {
              Constnamedeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int val = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NumberConstantDeclaration(name, val); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*constnamedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // constnamedeclaration ::= IDENT ASSIGN CHARACTER 
            {
              Constnamedeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new CharConstantDeclaration(name, val); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*constnamedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // constnamedeclaration ::= IDENT ASSIGN BOOL 
            {
              Constnamedeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		boolean val = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new BoolConstantDeclaration(name, val); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*constnamedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variabledeclaration ::= variabledeclaration COMA namedeclaration 
            {
              Variabledeclaration RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variabledeclaration v1 = (Variabledeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Namedeclaration n2 = (Namedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new VariabledeclarationDerived2(v1, n2); RESULT.setLine(v1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*variabledeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variabledeclaration ::= type namedeclaration 
            {
              Variabledeclaration RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Namedeclaration n2 = (Namedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new VariabledeclarationDerived1(t1, n2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*variabledeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // constantdeclaration ::= CONST type constnamedeclaration 
            {
              Constantdeclaration RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Constnamedeclaration c2 = (Constnamedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ConstantDeclarationTyped(t1, c2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*constantdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // constantdeclaration ::= constantdeclaration COMA constnamedeclaration 
            {
              Constantdeclaration RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Constantdeclaration c1 = (Constantdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Constnamedeclaration c2 = (Constnamedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ConstantDeclarations(c1, c2); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*constantdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // formpars ::= 
            {
              Formpars RESULT = null;
		 RESULT=new FormparsDerived4(); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*formpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // formpars ::= type namedeclaration 
            {
              Formpars RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Namedeclaration n2 = (Namedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FormparsDerived3(t1, n2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*formpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // formpars ::= formpars COMA error 
            {
              Formpars RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formpars f1 = (Formpars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new FormparsDerived2(f1); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*formpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // formpars ::= formpars COMA type namedeclaration 
            {
              Formpars RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Formpars f1 = (Formpars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Namedeclaration n3 = (Namedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FormparsDerived1(f1, t2, n3); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*formpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // formparswrapper ::= LPAREN error COMA formpars RPAREN 
            {
              Formparswrapper RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formpars f1 = (Formpars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new FormparswrapperDerived1(f1); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*formparswrapper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // formparswrapper ::= LPAREN formpars RPAREN 
            {
              Formparswrapper RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formpars f1 = (Formpars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new FormParsWrap(f1); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*formparswrapper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declarationblock ::= declarationblock error SEMICOLON 
            {
              Declarationblock RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declarationblock d1 = (Declarationblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new DeclarationblockDerived1(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*declarationblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declarationblock ::= 
            {
              Declarationblock RESULT = null;
		 RESULT=new EmptyDeclarationBlock(); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*declarationblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declarationblock ::= declarationblock variabledeclaration SEMICOLON 
            {
              Declarationblock RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declarationblock d1 = (Declarationblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variabledeclaration v2 = (Variabledeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new DeclBlock(d1, v2); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*declarationblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declarationblockwrapper ::= declarationblock error 
            {
              Declarationblockwrapper RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declarationblock d1 = (Declarationblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new DeclarationblockwrapperDerived1(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*declarationblockwrapper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declarationblockwrapper ::= declarationblock 
            {
              Declarationblockwrapper RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Declarationblock d1 = (Declarationblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new DeclarationBlockWrapper1(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*declarationblockwrapper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // functiondeclarationblock ::= declarationblock 
            {
              Functiondeclarationblock RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Declarationblock d1 = (Declarationblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FunctionDeclBlock(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*functiondeclarationblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function ::= functionheader functiondeclarationblock LBRACE statementblock RBRACE 
            {
              Function RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Functionheader f1 = (Functionheader)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Functiondeclarationblock f2 = (Functiondeclarationblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statementblock s3 = (Statementblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Function(f1, f2, s3); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*function*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // functionheader ::= functionname formparswrapper 
            {
              Functionheader RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Functionname name = (Functionname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Formparswrapper f1 = (Formparswrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FuncHeader(name, f1); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*functionheader*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // codebody ::= codebody function 
            {
              Codebody RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Codebody c1 = (Codebody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Function f2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new CodebodyDerived2(c1, f2); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*codebody*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // codebody ::= 
            {
              Codebody RESULT = null;
		 RESULT=new CodebodyDerived1(); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*codebody*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // classcodebody ::= 
            {
              Classcodebody RESULT = null;
		 RESULT=new ClasscodebodyDerived2(); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*classcodebody*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // classcodebody ::= LBRACE codebody RBRACE 
            {
              Classcodebody RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Codebody c1 = (Codebody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ClasscodebodyDerived1(c1); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*classcodebody*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // classdeclaration ::= CLASS classname extendsdeclaration implementsdeclaration LBRACE declarationblockwrapper classcodebody RBRACE 
            {
              Classdeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Classname name = (Classname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Extendsdeclaration e1 = (Extendsdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Implementsdeclaration i2 = (Implementsdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int d3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declarationblockwrapper d3 = (Declarationblockwrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Classcodebody c4 = (Classcodebody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Class(name, e1, i2, d3, c4); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*classdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // implementedname ::= type 
            {
              Implementedname RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ImplementedNm(t1); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*implementedname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // nonemptyimplementsdeclaration ::= nonemptyimplementsdeclaration COMA implementedname 
            {
              Nonemptyimplementsdeclaration RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nonemptyimplementsdeclaration n1 = (Nonemptyimplementsdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Implementedname i2 = (Implementedname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NonemptyimplementsdeclarationDerived2(n1, i2); RESULT.setLine(n1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*nonemptyimplementsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // nonemptyimplementsdeclaration ::= IMPLEMENTS implementedname 
            {
              Nonemptyimplementsdeclaration RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Implementedname i1 = (Implementedname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NonemptyimplementsdeclarationDerived1(i1); RESULT.setLine(i1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*nonemptyimplementsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // emptyimplementsdeclaration ::= 
            {
              Emptyimplementsdeclaration RESULT = null;
		 RESULT=new EmptyimplementsdeclarationDerived1(); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*emptyimplementsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // implementsdeclaration ::= emptyimplementsdeclaration 
            {
              Implementsdeclaration RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Emptyimplementsdeclaration e1 = (Emptyimplementsdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ImplementsdeclarationDerived2(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*implementsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // implementsdeclaration ::= nonemptyimplementsdeclaration 
            {
              Implementsdeclaration RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Nonemptyimplementsdeclaration n1 = (Nonemptyimplementsdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ImplementsdeclarationDerived1(n1); RESULT.setLine(n1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*implementsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // extendsdeclaration ::= EXTENDS error 
            {
              Extendsdeclaration RESULT = null;
		 RESULT=new ExtendsdeclarationDerived2(); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*extendsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // extendsdeclaration ::= error 
            {
              Extendsdeclaration RESULT = null;
		 RESULT=new ExtendsdeclarationDerived1(); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*extendsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // extendsdeclaration ::= 
            {
              Extendsdeclaration RESULT = null;
		 RESULT=new EmptyExtendsDeclaration(); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*extendsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // extendsdeclaration ::= EXTENDS IDENT 
            {
              Extendsdeclaration RESULT = null;
		int baseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String base = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ExtendsDecl(base); RESULT.setLine(baseleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*extendsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // programdeclarations ::= programdeclarations error SEMICOLON 
            {
              Programdeclarations RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new ProgramdeclarationsDerived7(p1); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // programdeclarations ::= programdeclarations variabledeclaration SEMICOLON 
            {
              Programdeclarations RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variabledeclaration v2 = (Variabledeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ProgramdeclarationsDerived6(p1, v2); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // programdeclarations ::= programdeclarations constantdeclaration SEMICOLON 
            {
              Programdeclarations RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Constantdeclaration c2 = (Constantdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ProgramdeclarationsDerived5(p1, c2); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // programdeclarations ::= programdeclarations enumdeclaration 
            {
              Programdeclarations RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Enumdeclaration e2 = (Enumdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ProgramdeclarationsDerived4(p1, e2); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // programdeclarations ::= programdeclarations interfacedeclaration 
            {
              Programdeclarations RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Interfacedeclaration i2 = (Interfacedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ProgramdeclarationsDerived3(p1, i2); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // programdeclarations ::= programdeclarations classdeclaration 
            {
              Programdeclarations RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Classdeclaration c2 = (Classdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ProgramdeclarationsDerived2(p1, c2); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // programdeclarations ::= 
            {
              Programdeclarations RESULT = null;
		 RESULT=new ProgramdeclarationsDerived1(); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // functionname ::= VOID IDENT 
            {
              Functionname RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ProcedureName(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*functionname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // functionname ::= type IDENT 
            {
              Functionname RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FuncName(t1, name); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*functionname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // interfaceinner ::= interfaceinner functionheader SEMICOLON 
            {
              Interfaceinner RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Interfaceinner i1 = (Interfaceinner)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Functionheader f2 = (Functionheader)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new InterfaceMethodDeclaration(i1, f2); RESULT.setLine(i1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*interfaceinner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // interfaceinner ::= 
            {
              Interfaceinner RESULT = null;
		 RESULT=new EmptyInterfaceInner(); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*interfaceinner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // interfacename ::= IDENT 
            {
              Interfacename RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new InterfName(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*interfacename*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // interfacedeclaration ::= INTERFACE interfacename LBRACE interfaceinner RBRACE 
            {
              Interfacedeclaration RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Interfacename i1 = (Interfacename)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Interfaceinner i2 = (Interfaceinner)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new InterfaceDecl(i1, i2); RESULT.setLine(i1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*interfacedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // enuminner ::= enuminner COMA enumconstant 
            {
              Enuminner RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Enuminner e1 = (Enuminner)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Enumconstant e2 = (Enumconstant)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new EnuminnerDerived2(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*enuminner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // enuminner ::= enumconstant 
            {
              Enuminner RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Enumconstant e1 = (Enumconstant)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new EnuminnerDerived1(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*enuminner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // enumdeclaration ::= ENUM enumname LBRACE enuminner RBRACE 
            {
              Enumdeclaration RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Enumname e1 = (Enumname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Enuminner e2 = (Enuminner)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new EnumDecl(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*enumdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // enumconstant ::= IDENT ASSIGN NUMBER 
            {
              Enumconstant RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int value = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NumberedEnumConst(name, value); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*enumconstant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // enumconstant ::= IDENT 
            {
              Enumconstant RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new EnumConst(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*enumconstant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // enumname ::= IDENT 
            {
              Enumname RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new EnumNm(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*enumname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classname ::= IDENT 
            {
              Classname RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ClsName(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*classname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programname ::= IDENT 
            {
              Programname RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ProgName(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*programname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM programname programdeclarations LBRACE codebody RBRACE 
            {
              Program RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Programname name = (Programname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Codebody c2 = (Codebody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ProgramDerived1(name, p1, c2); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

