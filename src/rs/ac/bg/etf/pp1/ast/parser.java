
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Oct 10 20:35:43 CEST 2018
//----------------------------------------------------

package rs.ac.bg.etf.pp1.ast;

import rs.ac.bg.etf.pp1.Yylex;
import rs.ac.bg.etf.pp1.CompilerError;
import java_cup.runtime.Symbol;

/** CUP v0.10k generated parser.
  * @version Wed Oct 10 20:35:43 CEST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\032\010\000\002\002\004\000\002\037" +
    "\003\000\002\035\003\000\002\036\003\000\002\031\002" +
    "\000\002\031\004\000\002\031\005\000\002\031\005\000" +
    "\002\034\004\000\002\034\005\000\002\030\013\000\002" +
    "\030\012\000\002\027\002\000\002\027\004\000\002\023" +
    "\011\000\002\023\011\000\002\024\005\000\002\024\004" +
    "\000\002\024\002\000\002\020\005\000\002\017\006\000" +
    "\002\017\004\000\002\017\004\000\002\017\002\000\002" +
    "\026\005\000\002\026\005\000\002\022\004\000\002\022" +
    "\005\000\002\022\005\000\002\022\004\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\021\003\000" +
    "\002\021\005\000\002\015\003\000\002\015\005\000\002" +
    "\015\007\000\002\015\004\000\002\015\011\000\002\015" +
    "\004\000\002\015\004\000\002\015\005\000\002\015\004" +
    "\000\002\015\004\000\002\016\002\000\002\016\004\000" +
    "\002\014\006\000\002\014\007\000\002\014\005\000\002" +
    "\014\006\000\002\014\005\000\002\014\006\000\002\013" +
    "\003\000\002\013\005\000\002\011\003\000\002\011\005" +
    "\000\002\012\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\006\003\000\002\006\005\000\002\006" +
    "\005\000\002\005\003\000\002\005\004\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\033\006\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\004\000\002\003\007\000\002\003" +
    "\005\000\002\003\003\000\002\004\003\000\002\004\005" +
    "\000\002\004\006\000\002\007\003\000\002\010\003\000" +
    "\002\010\005\000\002\010\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\006\005\001\002\000\004\002\271\001" +
    "\002\000\004\022\007\001\002\000\012\010\ufffc\022\ufffc" +
    "\024\ufffc\051\ufffc\001\002\000\012\010\uffff\022\uffff\024" +
    "\uffff\051\uffff\001\002\000\012\010\020\022\017\024\011" +
    "\051\012\001\002\000\004\022\017\001\002\000\010\015" +
    "\ufff4\022\ufff4\052\ufff4\001\002\000\006\045\264\046\033" +
    "\001\002\000\012\010\ufffb\022\ufffb\024\ufffb\051\ufffb\001" +
    "\002\000\006\003\263\022\037\001\002\000\006\045\253" +
    "\046\252\001\002\000\054\003\uffac\022\uffac\025\uffac\026" +
    "\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac" +
    "\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\045\uffac\046" +
    "\uffac\050\uffac\051\uffac\053\uffac\054\uffac\001\002\000\004" +
    "\022\021\001\002\000\006\020\ufffe\051\ufffe\001\002\000" +
    "\006\020\024\051\023\001\002\000\010\010\uffee\022\uffee" +
    "\051\uffee\001\002\000\004\022\017\001\002\000\004\051" +
    "\026\001\002\000\010\010\uffee\022\uffee\051\uffee\001\002" +
    "\000\010\010\020\022\017\051\030\001\002\000\010\015" +
    "\ufff4\022\ufff4\052\ufff4\001\002\000\006\045\034\046\033" +
    "\001\002\000\010\010\uffef\022\uffef\051\uffef\001\002\000" +
    "\006\003\036\022\037\001\002\000\010\010\ufff0\022\ufff0" +
    "\051\ufff0\001\002\000\006\045\uffe5\046\uffe5\001\002\000" +
    "\006\045\uffe4\046\uffe4\001\002\000\014\003\uffdf\045\uffdf" +
    "\046\uffdf\050\uffdf\053\040\001\002\000\004\054\041\001" +
    "\002\000\012\003\uffde\045\uffde\046\uffde\050\uffde\001\002" +
    "\000\010\015\046\022\017\052\045\001\002\000\010\015" +
    "\ufff3\022\ufff3\052\ufff3\001\002\000\004\022\047\001\002" +
    "\000\004\052\234\001\002\000\004\022\047\001\002\000" +
    "\004\047\ufffd\001\002\000\004\047\052\001\002\000\010" +
    "\010\uffee\022\uffee\051\uffee\001\002\000\012\003\uffe9\022" +
    "\017\046\uffe9\050\uffe9\001\002\000\004\022\037\001\002" +
    "\000\010\003\057\046\055\050\056\001\002\000\004\022" +
    "\017\001\002\000\010\010\uffed\022\uffed\051\uffed\001\002" +
    "\000\010\003\uffeb\046\uffeb\050\uffeb\001\002\000\004\022" +
    "\037\001\002\000\010\003\uffec\046\uffec\050\uffec\001\002" +
    "\000\010\003\uffea\046\uffea\050\uffea\001\002\000\010\010" +
    "\020\022\017\051\064\001\002\000\024\007\uffd3\011\uffd3" +
    "\012\uffd3\014\uffd3\016\uffd3\021\uffd3\022\uffd3\051\uffd3\052" +
    "\uffd3\001\002\000\024\007\101\011\072\012\071\014\076" +
    "\016\100\021\074\022\067\051\066\052\077\001\002\000" +
    "\024\007\uffd3\011\uffd3\012\uffd3\014\uffd3\016\uffd3\021\uffd3" +
    "\022\uffd3\051\uffd3\052\uffd3\001\002\000\062\003\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\001\002\000\016\042\217\043" +
    "\216\044\215\047\161\053\160\055\162\001\002\000\004" +
    "\047\211\001\002\000\022\007\101\011\072\012\071\014" +
    "\076\016\100\021\074\022\067\051\066\001\002\000\024" +
    "\007\uffd2\011\uffd2\012\uffd2\014\uffd2\016\uffd2\021\uffd2\022" +
    "\uffd2\051\uffd2\052\uffd2\001\002\000\004\045\207\001\002" +
    "\000\026\007\uffdd\011\uffdd\012\uffdd\014\uffdd\016\uffdd\017" +
    "\uffdd\021\uffdd\022\uffdd\051\uffdd\052\uffdd\001\002\000\022" +
    "\004\115\005\111\013\113\022\067\023\112\026\110\045" +
    "\204\047\124\001\002\000\010\015\ufff1\022\ufff1\052\ufff1" +
    "\001\002\000\022\007\101\011\072\012\071\014\076\016" +
    "\100\021\074\022\067\051\066\001\002\000\004\045\104" +
    "\001\002\000\004\045\103\001\002\000\026\007\uffd4\011" +
    "\uffd4\012\uffd4\014\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4" +
    "\051\uffd4\052\uffd4\001\002\000\026\007\uffd8\011\uffd8\012" +
    "\uffd8\014\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8\051\uffd8" +
    "\052\uffd8\001\002\000\004\017\106\001\002\000\004\047" +
    "\107\001\002\000\020\004\115\005\111\013\113\022\067" +
    "\023\112\026\110\047\124\001\002\000\016\004\115\005" +
    "\111\013\113\022\067\023\112\047\124\001\002\000\046" +
    "\003\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6" +
    "\041\uffb6\045\uffb6\046\uffb6\050\uffb6\054\uffb6\001\002\000" +
    "\046\003\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\045\uffb5\046\uffb5\050\uffb5\054\uffb5\001\002" +
    "\000\004\022\017\001\002\000\006\041\174\050\173\001" +
    "\002\000\046\003\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\045\uffb7\046\uffb7\050\uffb7\054\uffb7" +
    "\001\002\000\046\003\uffc0\025\uffc0\026\uffc0\027\134\030" +
    "\135\031\133\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\045\uffc0\046\uffc0\050\uffc0\054" +
    "\uffc0\001\002\000\054\003\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\045\uffb4\046\uffb4\047\161" +
    "\050\uffb4\053\160\054\uffb4\055\162\001\002\000\046\003" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\045\uffbd\046\uffbd\050\uffbd\054\uffbd\001\002\000\010" +
    "\040\156\041\uffcb\050\uffcb\001\002\000\030\025\130\026" +
    "\131\032\144\033\146\034\142\035\145\036\147\037\143" +
    "\040\uffc7\041\uffc7\050\uffc7\001\002\000\010\040\uffc9\041" +
    "\uffc9\050\uffc9\001\002\000\020\004\115\005\111\013\113" +
    "\022\067\023\112\026\110\047\124\001\002\000\046\003" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\045\uffb0\046\uffb0\050\uffb0\054\uffb0\001\002\000\010" +
    "\025\130\026\131\050\127\001\002\000\046\003\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\045" +
    "\uffb1\046\uffb1\050\uffb1\054\uffb1\001\002\000\020\004\115" +
    "\005\111\013\113\022\067\023\112\026\110\047\124\001" +
    "\002\000\020\004\115\005\111\013\113\022\067\023\112" +
    "\026\110\047\124\001\002\000\046\003\uffbe\025\uffbe\026" +
    "\uffbe\027\134\030\135\031\133\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\045\uffbe\046" +
    "\uffbe\050\uffbe\054\uffbe\001\002\000\016\004\115\005\111" +
    "\013\113\022\067\023\112\047\124\001\002\000\016\004" +
    "\115\005\111\013\113\022\067\023\112\047\124\001\002" +
    "\000\016\004\115\005\111\013\113\022\067\023\112\047" +
    "\124\001\002\000\046\003\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\040\uffba\041\uffba\045\uffba\046\uffba\050\uffba" +
    "\054\uffba\001\002\000\046\003\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\045\uffbb\046\uffbb\050" +
    "\uffbb\054\uffbb\001\002\000\046\003\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\045\uffb9\046\uffb9" +
    "\050\uffb9\054\uffb9\001\002\000\046\003\uffbf\025\uffbf\026" +
    "\uffbf\027\134\030\135\031\133\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\045\uffbf\046" +
    "\uffbf\050\uffbf\054\uffbf\001\002\000\020\004\115\005\111" +
    "\013\113\022\067\023\112\026\110\047\124\001\002\000" +
    "\020\004\115\005\111\013\113\022\067\023\112\026\110" +
    "\047\124\001\002\000\020\004\115\005\111\013\113\022" +
    "\067\023\112\026\110\047\124\001\002\000\020\004\115" +
    "\005\111\013\113\022\067\023\112\026\110\047\124\001" +
    "\002\000\020\004\115\005\111\013\113\022\067\023\112" +
    "\026\110\047\124\001\002\000\020\004\115\005\111\013" +
    "\113\022\067\023\112\026\110\047\124\001\002\000\014" +
    "\025\130\026\131\040\uffc2\041\uffc2\050\uffc2\001\002\000" +
    "\014\025\130\026\131\040\uffc5\041\uffc5\050\uffc5\001\002" +
    "\000\014\025\130\026\131\040\uffc3\041\uffc3\050\uffc3\001" +
    "\002\000\014\025\130\026\131\040\uffc6\041\uffc6\050\uffc6" +
    "\001\002\000\014\025\130\026\131\040\uffc1\041\uffc1\050" +
    "\uffc1\001\002\000\014\025\130\026\131\040\uffc4\041\uffc4" +
    "\050\uffc4\001\002\000\020\004\115\005\111\013\113\022" +
    "\067\023\112\026\110\047\124\001\002\000\010\040\uffc8" +
    "\041\uffc8\050\uffc8\001\002\000\020\004\115\005\111\013" +
    "\113\022\067\023\112\026\110\047\124\001\002\000\024" +
    "\004\115\005\111\013\113\022\067\023\112\026\110\046" +
    "\uffa9\047\124\050\uffa9\001\002\000\004\022\163\001\002" +
    "\000\062\003\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\053\uffae\054\uffae\055\uffae\001\002" +
    "\000\006\046\166\050\167\001\002\000\012\025\130\026" +
    "\131\046\uffab\050\uffab\001\002\000\020\004\115\005\111" +
    "\013\113\022\067\023\112\026\110\047\124\001\002\000" +
    "\046\003\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\045\uffb8\046\uffb8\050\uffb8\054\uffb8\001\002" +
    "\000\012\025\130\026\131\046\uffaa\050\uffaa\001\002\000" +
    "\010\025\130\026\131\054\172\001\002\000\062\003\uffad" +
    "\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\053\uffad\054\uffad\055\uffad\001\002\000\004\045\176" +
    "\001\002\000\020\004\115\005\111\013\113\022\067\023" +
    "\112\026\110\047\124\001\002\000\010\040\156\041\uffca" +
    "\050\uffca\001\002\000\026\007\uffd9\011\uffd9\012\uffd9\014" +
    "\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\051\uffd9\052\uffd9" +
    "\001\002\000\050\003\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\045\uffb3\046\uffb3\050\uffb3\053" +
    "\200\054\uffb3\001\002\000\020\004\115\005\111\013\113" +
    "\022\067\023\112\026\110\047\124\001\002\000\010\025" +
    "\130\026\131\054\202\001\002\000\046\003\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\045\uffb2" +
    "\046\uffb2\050\uffb2\054\uffb2\001\002\000\046\003\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\045" +
    "\uffbc\046\uffbc\050\uffbc\054\uffbc\001\002\000\026\007\uffd5" +
    "\011\uffd5\012\uffd5\014\uffd5\016\uffd5\017\uffd5\021\uffd5\022" +
    "\uffd5\051\uffd5\052\uffd5\001\002\000\010\025\130\026\131" +
    "\045\206\001\002\000\026\007\uffd6\011\uffd6\012\uffd6\014" +
    "\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\051\uffd6\052\uffd6" +
    "\001\002\000\026\007\uffd7\011\uffd7\012\uffd7\014\uffd7\016" +
    "\uffd7\017\uffd7\021\uffd7\022\uffd7\051\uffd7\052\uffd7\001\002" +
    "\000\026\007\uffda\011\uffda\012\uffda\014\uffda\016\uffda\017" +
    "\uffda\021\uffda\022\uffda\051\uffda\052\uffda\001\002\000\020" +
    "\004\115\005\111\013\113\022\067\023\112\026\110\047" +
    "\124\001\002\000\006\041\174\050\213\001\002\000\022" +
    "\007\101\011\072\012\071\014\076\016\100\021\074\022" +
    "\067\051\066\001\002\000\026\007\uffdb\011\uffdb\012\uffdb" +
    "\014\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb\051\uffdb\052" +
    "\uffdb\001\002\000\006\003\230\045\227\001\002\000\006" +
    "\003\225\045\224\001\002\000\020\004\115\005\111\013" +
    "\113\022\067\023\112\026\110\047\124\001\002\000\012" +
    "\003\222\025\130\026\131\045\221\001\002\000\026\007" +
    "\uffd1\011\uffd1\012\uffd1\014\uffd1\016\uffd1\017\uffd1\021\uffd1" +
    "\022\uffd1\051\uffd1\052\uffd1\001\002\000\004\045\223\001" +
    "\002\000\026\007\uffd0\011\uffd0\012\uffd0\014\uffd0\016\uffd0" +
    "\017\uffd0\021\uffd0\022\uffd0\051\uffd0\052\uffd0\001\002\000" +
    "\026\007\uffcf\011\uffcf\012\uffcf\014\uffcf\016\uffcf\017\uffcf" +
    "\021\uffcf\022\uffcf\051\uffcf\052\uffcf\001\002\000\004\045" +
    "\226\001\002\000\026\007\uffce\011\uffce\012\uffce\014\uffce" +
    "\016\uffce\017\uffce\021\uffce\022\uffce\051\uffce\052\uffce\001" +
    "\002\000\026\007\uffcd\011\uffcd\012\uffcd\014\uffcd\016\uffcd" +
    "\017\uffcd\021\uffcd\022\uffcd\051\uffcd\052\uffcd\001\002\000" +
    "\004\045\231\001\002\000\026\007\uffcc\011\uffcc\012\uffcc" +
    "\014\uffcc\016\uffcc\017\uffcc\021\uffcc\022\uffcc\051\uffcc\052" +
    "\uffcc\001\002\000\024\007\101\011\072\012\071\014\076" +
    "\016\100\021\074\022\067\051\066\052\233\001\002\000" +
    "\026\007\uffdc\011\uffdc\012\uffdc\014\uffdc\016\uffdc\017\uffdc" +
    "\021\uffdc\022\uffdc\051\uffdc\052\uffdc\001\002\000\012\010" +
    "\ufff6\022\ufff6\024\ufff6\051\ufff6\001\002\000\004\047\052" +
    "\001\002\000\010\010\uffee\022\uffee\051\uffee\001\002\000" +
    "\010\010\020\022\017\051\240\001\002\000\024\007\uffd3" +
    "\011\uffd3\012\uffd3\014\uffd3\016\uffd3\021\uffd3\022\uffd3\051" +
    "\uffd3\052\uffd3\001\002\000\024\007\101\011\072\012\071" +
    "\014\076\016\100\021\074\022\067\051\066\052\242\001" +
    "\002\000\010\015\ufff2\022\ufff2\052\ufff2\001\002\000\006" +
    "\003\244\051\ufff8\001\002\000\004\051\ufff7\001\002\000" +
    "\010\010\020\022\017\051\246\001\002\000\010\015\ufff4" +
    "\022\ufff4\052\ufff4\001\002\000\010\015\046\022\017\052" +
    "\250\001\002\000\004\052\251\001\002\000\012\010\ufff5" +
    "\022\ufff5\024\ufff5\051\ufff5\001\002\000\004\022\254\001" +
    "\002\000\012\010\ufffa\022\ufffa\024\ufffa\051\ufffa\001\002" +
    "\000\004\042\256\001\002\000\006\045\uffe8\046\uffe8\001" +
    "\002\000\010\004\257\005\260\023\261\001\002\000\006" +
    "\045\uffe0\046\uffe0\001\002\000\006\045\uffe1\046\uffe1\001" +
    "\002\000\006\045\uffe2\046\uffe2\001\002\000\006\045\uffe6" +
    "\046\uffe6\001\002\000\006\045\uffe3\046\uffe3\001\002\000" +
    "\012\010\ufff9\022\ufff9\024\ufff9\051\ufff9\001\002\000\010" +
    "\015\046\022\017\052\266\001\002\000\004\002\001\001" +
    "\002\000\004\022\254\001\002\000\006\045\uffe7\046\uffe7" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\032\003\001\001\000\002\001\001\000" +
    "\004\037\005\001\001\000\004\031\007\001\001\000\002" +
    "\001\001\000\012\007\014\022\012\026\015\030\013\001" +
    "\001\000\004\007\266\001\001\000\004\027\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\021" +
    "\001\001\000\002\001\001\000\004\034\024\001\001\000" +
    "\004\024\244\001\001\000\004\007\242\001\001\000\002" +
    "\001\001\000\004\024\026\001\001\000\010\007\014\022" +
    "\030\030\031\001\001\000\004\027\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\043\023\042\001\001\000\002\001\001\000\004\036\234" +
    "\001\001\000\002\001\001\000\004\036\047\001\001\000" +
    "\002\001\001\000\004\020\050\001\001\000\004\024\062" +
    "\001\001\000\006\007\052\017\053\001\001\000\004\021" +
    "\061\001\001\000\002\001\001\000\004\007\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\014" +
    "\022\030\030\031\001\001\000\004\016\064\001\001\000" +
    "\012\004\067\014\074\015\072\033\101\001\001\000\004" +
    "\016\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\067\014\074\015\207\033\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\117\004\116\005\115\006\204\033\124" +
    "\001\001\000\002\001\001\000\012\004\067\014\074\015" +
    "\104\033\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\117\004\116\005\115\006\121" +
    "\011\120\012\122\013\113\033\124\001\001\000\010\003" +
    "\202\004\116\033\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\117\004\116\005\115\006\125\033\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\117\004\116\005\140\033\124\001\001" +
    "\000\012\003\117\004\116\005\131\033\124\001\001\000" +
    "\002\001\001\000\010\003\137\004\116\033\124\001\001" +
    "\000\010\003\136\004\116\033\124\001\001\000\010\003" +
    "\135\004\116\033\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\117\004\116\005\115\006\154\033\124\001\001\000\014" +
    "\003\117\004\116\005\115\006\153\033\124\001\001\000" +
    "\014\003\117\004\116\005\115\006\152\033\124\001\001" +
    "\000\014\003\117\004\116\005\115\006\151\033\124\001" +
    "\001\000\014\003\117\004\116\005\115\006\150\033\124" +
    "\001\001\000\014\003\117\004\116\005\115\006\147\033" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\117\004\116\005\115\006\121\012\156" +
    "\033\124\001\001\000\002\001\001\000\014\003\117\004" +
    "\116\005\115\006\170\033\124\001\001\000\016\003\117" +
    "\004\116\005\115\006\164\010\163\033\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\117\004\116\005\115\006\167\033" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\117\004\116\005\115\006\121\011\174\012\122\033\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\117\004\116\005\115\006\200\033\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\117\004" +
    "\116\005\115\006\121\011\120\012\122\013\211\033\124" +
    "\001\001\000\002\001\001\000\012\004\067\014\074\015" +
    "\213\033\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\117\004\116\005\115\006" +
    "\217\033\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\067\014\074\015" +
    "\072\033\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\235\001\001\000\004\024\236\001\001\000" +
    "\010\007\014\022\030\030\031\001\001\000\004\016\240" +
    "\001\001\000\012\004\067\014\074\015\072\033\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\014\022\030\030\031\001\001\000\004\027" +
    "\246\001\001\000\006\007\043\023\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\043\023\042\001\001\000\002\001\001\000" +
    "\004\025\267\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    protected int error_sync_size()
    {
        return 1;
    }

    @Override
    public void syntax_error(Symbol cur_token)
    {
        System.err.println("Warning");
        System.err.println("Fixable error found at Line:"+((Yylex)getScanner()).getLineNo()+" Column:"+((Yylex)getScanner()).getColumn());
        System.err.println("Skipping to next valid code\n");
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        CompilerError.raise("Unfixable syntax error", ((Yylex)getScanner()).getLineNo(), ((Yylex)getScanner()).getColumn());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // actpars ::= 
            {
              Actpars RESULT = null;
		 RESULT=new EmptyParameters(); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*actpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // actpars ::= actpars COMA expr 
            {
              Actpars RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Actpars a1 = (Actpars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Parameters(a1, e2); RESULT.setLine(a1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*actpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // actpars ::= expr 
            {
              Actpars RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Parameter(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*actpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // type ::= IDENT 
            {
              Type RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Type(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // designator ::= designator LBRACK expr RBRACK 
            {
              Designator RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new IndexDesignator(d1, e2); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // designator ::= designator DOT IDENT 
            {
              Designator RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new PathDesignator(d1, val); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // designator ::= IDENT 
            {
              Designator RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new BaseDesignator(val); RESULT.setLine(valleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= call 
            {
              Factor RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Call c1 = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new CallResult(c1); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= LPAREN expr RPAREN 
            {
              Factor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Parenthesized(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= NEW type LBRACK expr RBRACK 
            {
              Factor RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new NewArray(t1, e2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= NEW type 
            {
              Factor RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NewObject(t1); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= designator 
            {
              Factor RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleFactor(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= BOOL 
            {
              Factor RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		boolean val = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new BooleanConstant(val); RESULT.setLine(valleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= CHARACTER 
            {
              Factor RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new CharacterConstant(val); RESULT.setLine(valleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= NUMBER 
            {
              Factor RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int val = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NumericConstant(val); RESULT.setLine(valleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // call ::= designator LPAREN actpars RPAREN 
            {
              Call RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Actpars a2 = (Actpars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new FuncCall(d1, a2); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*call*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // term ::= term MOD factor 
            {
              Term RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Factor f2 = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Modulus(t1, f2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // term ::= term DIVIDE factor 
            {
              Term RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Factor f2 = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Division(t1, f2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term ::= term STAR factor 
            {
              Term RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Factor f2 = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Multiplication(t1, f2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= MINUS factor 
            {
              Term RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Factor f1 = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Negated(f1); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term ::= factor 
            {
              Term RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Factor f1 = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleTerm(f1); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr MINUS term 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Substraction(e1, t2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr PLUS term 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Addition(e1, t2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= term 
            {
              Expr RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleExpr(t1); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condfactor ::= expr LESSEQUAL expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new LessEqual(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condfactor ::= expr LESS expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Less(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condfactor ::= expr GREATEREQUAL expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new GreaterEqual(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condfactor ::= expr GREATER expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Greater(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condfactor ::= expr NOTEQUALS expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NotEquals(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condfactor ::= expr EQUALS expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Equals(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condfactor ::= expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleCondFactor(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condterm ::= condterm AND condfactor 
            {
              Condterm RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condterm c1 = (Condterm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condfactor c2 = (Condfactor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new And(c1, c2); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*condterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condterm ::= condfactor 
            {
              Condterm RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condfactor c1 = (Condfactor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleCondTerm(c1); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*condterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condexpr ::= condexpr OR condterm 
            {
              Condexpr RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condexpr c1 = (Condexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condterm c2 = (Condterm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Or(c1, c2); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*condexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condexpr ::= condterm 
            {
              Condexpr RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condterm c1 = (Condterm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleCondExpr(c1); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*condexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // designatorstmt ::= designator DECREMENT error SEMICOLON 
            {
              Designatorstmt RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new Decrement2(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*designatorstmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // designatorstmt ::= designator DECREMENT SEMICOLON 
            {
              Designatorstmt RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new Decrement(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*designatorstmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // designatorstmt ::= designator INCREMENT error SEMICOLON 
            {
              Designatorstmt RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new Increment2(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*designatorstmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // designatorstmt ::= designator INCREMENT SEMICOLON 
            {
              Designatorstmt RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new Increment(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*designatorstmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // designatorstmt ::= designator ASSIGN expr error SEMICOLON 
            {
              Designatorstmt RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new Assign2(d1, e2); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*designatorstmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // designatorstmt ::= designator ASSIGN expr SEMICOLON 
            {
              Designatorstmt RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Assign(d1, e2); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*designatorstmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statementblock ::= statementblock statement 
            {
              Statementblock RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statementblock s1 = (Statementblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new StatementBlock(s1, s2); RESULT.setLine(s1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*statementblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statementblock ::= 
            {
              Statementblock RESULT = null;
		 RESULT=new EmptyBlock(); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*statementblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= call SEMICOLON 
            {
              Statement RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Call c1 = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new CallStatement(c1); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= RETURN SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new EmptyReturn(); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= RETURN expr SEMICOLON 
            {
              Statement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Return(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= CONTINUE SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new Continue(); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= BREAK SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new Break(); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= DO statement WHILE LPAREN condexpr RPAREN SEMICOLON 
            {
              Statement RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condexpr c2 = (Condexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new DoWhile(s1, c2); RESULT.setLine(s1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= ELSE statement 
            {
              Statement RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Else(s1); RESULT.setLine(s1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= IF LPAREN condexpr RPAREN statement 
            {
              Statement RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condexpr c1 = (Condexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new If(c1, s2); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= LBRACE statementblock RBRACE 
            {
              Statement RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statementblock s1 = (Statementblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Block(s1); RESULT.setLine(s1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= designatorstmt 
            {
              Statement RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Designatorstmt d1 = (Designatorstmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new StatementDerived1(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // namedeclaration ::= IDENT LBRACK RBRACK 
            {
              Namedeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new Array(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*namedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // namedeclaration ::= IDENT 
            {
              Namedeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Variable(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*namedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // constnamedeclaration ::= IDENT ASSIGN NUMBER 
            {
              Constnamedeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int val = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NumberConstantDeclaration(name, val); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*constnamedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // constnamedeclaration ::= IDENT ASSIGN CHARACTER 
            {
              Constnamedeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new CharConstantDeclaration(name, val); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*constnamedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // constnamedeclaration ::= IDENT ASSIGN BOOL 
            {
              Constnamedeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		boolean val = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new BoolConstantDeclaration(name, val); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*constnamedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variabledeclaration ::= type error 
            {
              Variabledeclaration RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new VariabledeclarationDerived4(t1); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*variabledeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variabledeclaration ::= variabledeclaration COMA error 
            {
              Variabledeclaration RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variabledeclaration v1 = (Variabledeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new VariabledeclarationDerived3(v1); RESULT.setLine(v1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*variabledeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variabledeclaration ::= variabledeclaration COMA namedeclaration 
            {
              Variabledeclaration RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variabledeclaration v1 = (Variabledeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Namedeclaration n2 = (Namedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new VariabledeclarationDerived2(v1, n2); RESULT.setLine(v1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*variabledeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variabledeclaration ::= type namedeclaration 
            {
              Variabledeclaration RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Namedeclaration n2 = (Namedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new VariabledeclarationDerived1(t1, n2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*variabledeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // constantdeclaration ::= CONST type constnamedeclaration 
            {
              Constantdeclaration RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Constnamedeclaration c2 = (Constnamedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ConstantDeclarationTyped(t1, c2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*constantdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // constantdeclaration ::= constantdeclaration COMA constnamedeclaration 
            {
              Constantdeclaration RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Constantdeclaration c1 = (Constantdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Constnamedeclaration c2 = (Constnamedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ConstantDeclarations(c1, c2); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*constantdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formpars ::= 
            {
              Formpars RESULT = null;
		 RESULT=new FormparsDerived4(); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*formpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formpars ::= type namedeclaration 
            {
              Formpars RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Namedeclaration n2 = (Namedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FormparsDerived3(t1, n2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*formpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formpars ::= formpars error 
            {
              Formpars RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formpars f1 = (Formpars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new FormparsDerived2(f1); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*formpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formpars ::= formpars COMA type namedeclaration 
            {
              Formpars RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Formpars f1 = (Formpars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Namedeclaration n3 = (Namedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FormparsDerived1(f1, t2, n3); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*formpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formparswrapper ::= LPAREN formpars RPAREN 
            {
              Formparswrapper RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formpars f1 = (Formpars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new FormParsWrapper(f1); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*formparswrapper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarationblock ::= 
            {
              Declarationblock RESULT = null;
		 RESULT=new EmptyDeclarationBlock(); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*declarationblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarationblock ::= declarationblock classdeclaration 
            {
              Declarationblock RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declarationblock d1 = (Declarationblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Classdeclaration c2 = (Classdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new DeclarationblockDerived1(d1, c2); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*declarationblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarationblock ::= declarationblock variabledeclaration SEMICOLON 
            {
              Declarationblock RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declarationblock d1 = (Declarationblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variabledeclaration v2 = (Variabledeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new DeclarationBlock(d1, v2); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*declarationblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= VOID functionname formparswrapper declarationblock LBRACE statementblock RBRACE 
            {
              Function RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Functionname name = (Functionname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Formparswrapper f1 = (Formparswrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Declarationblock d2 = (Declarationblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statementblock s3 = (Statementblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Proc(name, f1, d2, s3); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*function*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= type functionname formparswrapper declarationblock LBRACE statementblock RBRACE 
            {
              Function RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Functionname name = (Functionname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Formparswrapper f2 = (Formparswrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int d3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Declarationblock d3 = (Declarationblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statementblock s4 = (Statementblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Func(t1, name, f2, d3, s4); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*function*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codebody ::= codebody function 
            {
              Codebody RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Codebody c1 = (Codebody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Function f2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new CodebodyDerived2(c1, f2); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*codebody*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codebody ::= 
            {
              Codebody RESULT = null;
		 RESULT=new CodebodyDerived1(); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*codebody*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // classdeclaration ::= CLASS classname LBRACE declarationblock LBRACE codebody RBRACE RBRACE 
            {
              Classdeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Classname name = (Classname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Declarationblock d1 = (Declarationblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Codebody c2 = (Codebody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new NonDerivedClass(name, d1, c2); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*classdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // classdeclaration ::= CLASS classname extendsdeclaration LBRACE declarationblock LBRACE codebody RBRACE RBRACE 
            {
              Classdeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Classname name = (Classname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Extendsdeclaration e1 = (Extendsdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Declarationblock d2 = (Declarationblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int c3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Codebody c3 = (Codebody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new DerivedClass(name, e1, d2, c3); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*classdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // extendsdeclaration ::= EXTENDS type error 
            {
              Extendsdeclaration RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ExtendsdeclarationDerived2(t1); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*extendsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // extendsdeclaration ::= EXTENDS type 
            {
              Extendsdeclaration RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ExtendsdeclarationDerived1(t1); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*extendsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // programdeclarations ::= programdeclarations variabledeclaration SEMICOLON 
            {
              Programdeclarations RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variabledeclaration v2 = (Variabledeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ProgramdeclarationsDerived4(p1, v2); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // programdeclarations ::= programdeclarations constantdeclaration SEMICOLON 
            {
              Programdeclarations RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Constantdeclaration c2 = (Constantdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ProgramdeclarationsDerived3(p1, c2); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programdeclarations ::= programdeclarations classdeclaration 
            {
              Programdeclarations RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Classdeclaration c2 = (Classdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ProgramdeclarationsDerived2(p1, c2); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programdeclarations ::= 
            {
              Programdeclarations RESULT = null;
		 RESULT=new ProgramdeclarationsDerived1(); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // functionname ::= IDENT 
            {
              Functionname RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FunctionName(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*functionname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classname ::= IDENT 
            {
              Classname RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ClassName(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*classname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programname ::= IDENT 
            {
              Programname RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ProgramName(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*programname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM programname programdeclarations LBRACE codebody RBRACE 
            {
              Program RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Programname name = (Programname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Codebody c2 = (Codebody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ProgramDerived1(name, p1, c2); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

