
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Dec 16 17:36:49 CET 2018
//----------------------------------------------------

package rs.ac.bg.etf.pp1.ast;

import rs.ac.bg.etf.pp1.Yylex;
import rs.ac.bg.etf.pp1.CompilerError;
import java_cup.runtime.Symbol;

/** CUP v0.10k generated parser.
  * @version Sun Dec 16 17:36:49 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\036\010\000\002\002\004\000\002\046" +
    "\003\000\002\044\003\000\002\060\003\000\002\055\003" +
    "\000\002\055\005\000\002\056\007\000\002\057\003\000" +
    "\002\057\005\000\002\051\007\000\002\053\003\000\002" +
    "\052\002\000\002\052\005\000\002\045\004\000\002\045" +
    "\004\000\002\035\002\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\005\000\002\035\005\000" +
    "\002\040\004\000\002\040\002\000\002\043\003\000\002" +
    "\043\003\000\002\042\002\000\002\041\004\000\002\041" +
    "\005\000\002\062\003\000\002\034\012\000\002\061\005" +
    "\000\002\061\002\000\002\033\002\000\002\033\004\000" +
    "\002\054\004\000\002\026\007\000\002\064\003\000\002" +
    "\030\003\000\002\027\005\000\002\027\002\000\002\023" +
    "\005\000\002\022\006\000\002\022\004\000\002\022\002" +
    "\000\002\032\005\000\002\032\005\000\002\025\004\000" +
    "\002\025\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\024\003\000\002\024\005\000\002\020" +
    "\003\000\002\020\005\000\002\020\007\000\002\020\011" +
    "\000\002\020\007\000\002\020\013\000\002\020\004\000" +
    "\002\020\004\000\002\020\005\000\002\020\004\000\002" +
    "\020\004\000\002\020\004\000\002\020\004\000\002\020" +
    "\004\000\002\065\003\000\002\067\003\000\002\066\003" +
    "\000\002\014\003\000\002\014\002\000\002\015\003\000" +
    "\002\015\002\000\002\016\003\000\002\016\002\000\002" +
    "\063\003\000\002\021\002\000\002\021\004\000\002\050" +
    "\004\000\002\017\005\000\002\017\004\000\002\017\004" +
    "\000\002\013\003\000\002\013\005\000\002\011\003\000" +
    "\002\011\005\000\002\012\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\002\000\002\047\003\000\002\047" +
    "\003\000\002\006\003\000\002\006\005\000\002\006\005" +
    "\000\002\005\003\000\002\005\004\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\037\006\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\007\000\002\003\005" +
    "\000\002\003\003\000\002\004\003\000\002\004\005\000" +
    "\002\004\006\000\002\007\003\000\002\010\003\000\002" +
    "\010\005\000\002\010\002\000\002\070\006\000\002\071" +
    "\006\000\002\072\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\004\006\005\001\002\000\004\002\344\001" +
    "\002\000\004\025\007\001\002\000\016\010\ufff1\011\ufff1" +
    "\013\ufff1\025\ufff1\027\ufff1\054\ufff1\001\002\000\016\010" +
    "\uffff\011\uffff\013\uffff\025\uffff\027\uffff\054\uffff\001\002" +
    "\000\016\010\024\011\020\013\012\025\014\027\023\054" +
    "\013\001\002\000\016\010\ufff0\011\ufff0\013\ufff0\025\ufff0" +
    "\027\ufff0\054\ufff0\001\002\000\004\025\332\001\002\000" +
    "\010\020\uffe0\025\uffe0\055\uffe0\001\002\000\052\025\uff82" +
    "\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036" +
    "\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82" +
    "\050\uff82\051\uff82\053\uff82\054\uff82\056\uff82\057\uff82\001" +
    "\002\000\006\050\325\051\324\001\002\000\016\010\uffef" +
    "\011\uffef\013\uffef\025\uffef\027\uffef\054\uffef\001\002\000" +
    "\004\025\066\001\002\000\004\025\314\001\002\000\016" +
    "\010\uffee\011\uffee\013\uffee\025\uffee\027\uffee\054\uffee\001" +
    "\002\000\006\050\313\051\277\001\002\000\004\025\014" +
    "\001\002\000\004\025\025\001\002\000\010\012\ufffe\023" +
    "\ufffe\054\ufffe\001\002\000\010\012\uffea\023\027\054\uffea" +
    "\001\002\000\004\025\303\001\002\000\006\012\033\054" +
    "\uffe7\001\002\000\004\054\uffe8\001\002\000\004\054\041" +
    "\001\002\000\004\025\014\001\002\000\006\051\035\054" +
    "\uffe9\001\002\000\004\025\014\001\002\000\006\051\uffe5" +
    "\054\uffe5\001\002\000\006\051\uffe4\054\uffe4\001\002\000" +
    "\006\051\uffe6\054\uffe6\001\002\000\010\025\uffd9\054\uffd9" +
    "\055\uffd9\001\002\000\010\025\014\054\uffdb\055\uffdb\001" +
    "\002\000\006\054\044\055\uffe1\001\002\000\010\020\uffe0" +
    "\025\uffe0\055\uffe0\001\002\000\004\055\046\001\002\000" +
    "\016\010\uffe3\011\uffe3\013\uffe3\025\uffe3\027\uffe3\054\uffe3" +
    "\001\002\000\010\020\054\025\014\055\052\001\002\000" +
    "\010\020\uffdf\025\uffdf\055\uffdf\001\002\000\004\025\302" +
    "\001\002\000\004\055\uffe2\001\002\000\006\025\uffd9\054" +
    "\uffd9\001\002\000\004\025\072\001\002\000\004\052\057" +
    "\001\002\000\010\025\uffde\050\uffde\054\uffde\001\002\000" +
    "\010\025\014\051\uffd5\053\uffd5\001\002\000\004\025\066" +
    "\001\002\000\006\051\062\053\063\001\002\000\004\025" +
    "\014\001\002\000\010\025\uffd8\050\uffd8\054\uffd8\001\002" +
    "\000\004\025\066\001\002\000\006\051\uffd7\053\uffd7\001" +
    "\002\000\012\050\uffcd\051\uffcd\053\uffcd\056\067\001\002" +
    "\000\004\057\070\001\002\000\010\050\uffcc\051\uffcc\053" +
    "\uffcc\001\002\000\006\051\uffd6\053\uffd6\001\002\000\004" +
    "\052\ufff2\001\002\000\006\025\014\054\uffdc\001\002\000" +
    "\004\054\075\001\002\000\030\007\uffb3\015\uffb3\017\uffb3" +
    "\021\uffb3\022\uffb3\024\uffb3\025\uffb3\054\uffb3\055\uffb3\061" +
    "\uffb3\062\uffb3\001\002\000\030\007\112\015\106\017\105" +
    "\021\120\022\104\024\100\025\102\054\107\055\103\061" +
    "\077\062\113\001\002\000\004\052\273\001\002\000\004" +
    "\050\272\001\002\000\030\007\uffb2\015\uffb2\017\uffb2\021" +
    "\uffb2\022\uffb2\024\uffb2\025\uffb2\054\uffb2\055\uffb2\061\uffb2" +
    "\062\uffb2\001\002\000\060\030\uff85\031\uff85\032\uff85\033" +
    "\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85" +
    "\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050" +
    "\uff85\051\uff85\052\uff85\053\uff85\056\uff85\057\uff85\060\uff85" +
    "\001\002\000\010\020\uffdd\025\uffdd\055\uffdd\001\002\000" +
    "\004\052\uffbc\001\002\000\022\004\132\005\126\016\130" +
    "\025\102\026\127\031\125\050\267\052\141\001\002\000" +
    "\004\052\260\001\002\000\030\007\uffb3\015\uffb3\017\uffb3" +
    "\021\uffb3\022\uffb3\024\uffb3\025\uffb3\054\uffb3\055\uffb3\061" +
    "\uffb3\062\uffb3\001\002\000\004\050\255\001\002\000\016" +
    "\045\233\046\232\047\231\052\201\056\200\060\202\001" +
    "\002\000\004\050\254\001\002\000\004\052\246\001\002" +
    "\000\004\050\245\001\002\000\004\052\225\001\002\000" +
    "\004\050\224\001\002\000\004\050\223\001\002\000\004" +
    "\052\uffbb\001\002\000\004\050\222\001\002\000\032\007" +
    "\uffcb\014\uffcb\015\uffcb\017\uffcb\021\uffcb\022\uffcb\024\uffcb" +
    "\025\uffcb\054\uffcb\055\uffcb\061\uffcb\062\uffcb\001\002\000" +
    "\004\052\124\001\002\000\020\004\132\005\126\016\130" +
    "\025\102\026\127\031\125\052\141\001\002\000\016\004" +
    "\132\005\126\016\130\025\102\026\127\052\141\001\002" +
    "\000\044\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035" +
    "\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c" +
    "\044\uff8c\050\uff8c\051\uff8c\053\uff8c\057\uff8c\001\002\000" +
    "\044\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b" +
    "\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044" +
    "\uff8b\050\uff8b\051\uff8b\053\uff8b\057\uff8b\001\002\000\004" +
    "\025\014\001\002\000\006\044\213\053\uffb4\001\002\000" +
    "\044\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d" +
    "\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044" +
    "\uff8d\050\uff8d\051\uff8d\053\uff8d\057\uff8d\001\002\000\044" +
    "\030\uff96\031\uff96\032\154\033\155\034\153\035\uff96\036" +
    "\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96" +
    "\050\uff96\051\uff96\053\uff96\057\uff96\001\002\000\052\030" +
    "\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a" +
    "\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\050" +
    "\uff8a\051\uff8a\052\201\053\uff8a\056\200\057\uff8a\060\202" +
    "\001\002\000\044\030\uff93\031\uff93\032\uff93\033\uff93\034" +
    "\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\050\uff93\051\uff93\053\uff93\057\uff93\001" +
    "\002\000\012\043\176\044\uffad\050\uffad\053\uffad\001\002" +
    "\000\032\030\150\031\151\035\162\036\166\037\163\040" +
    "\165\041\167\042\164\043\uffa9\044\uffa9\050\uffa9\053\uffa9" +
    "\001\002\000\012\043\uffab\044\uffab\050\uffab\053\uffab\001" +
    "\002\000\020\004\132\005\126\016\130\025\102\026\127" +
    "\031\125\052\141\001\002\000\004\053\144\001\002\000" +
    "\044\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86" +
    "\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044" +
    "\uff86\050\uff86\051\uff86\053\uff86\057\uff86\001\002\000\026" +
    "\007\112\015\106\017\105\021\120\022\104\024\100\025" +
    "\102\054\107\061\077\062\113\001\002\000\032\007\uffc7" +
    "\014\uffc7\015\uffc7\017\uffc7\021\uffc7\022\uffc7\024\uffc7\025" +
    "\uffc7\054\uffc7\055\uffc7\061\uffc7\062\uffc7\001\002\000\010" +
    "\030\150\031\151\053\147\001\002\000\044\030\uff87\031" +
    "\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87" +
    "\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\050\uff87\051" +
    "\uff87\053\uff87\057\uff87\001\002\000\020\004\132\005\126" +
    "\016\130\025\102\026\127\031\125\052\141\001\002\000" +
    "\020\004\132\005\126\016\130\025\102\026\127\031\125" +
    "\052\141\001\002\000\044\030\uff94\031\uff94\032\154\033" +
    "\155\034\153\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94" +
    "\042\uff94\043\uff94\044\uff94\050\uff94\051\uff94\053\uff94\057" +
    "\uff94\001\002\000\016\004\132\005\126\016\130\025\102" +
    "\026\127\052\141\001\002\000\016\004\132\005\126\016" +
    "\130\025\102\026\127\052\141\001\002\000\016\004\132" +
    "\005\126\016\130\025\102\026\127\052\141\001\002\000" +
    "\044\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90" +
    "\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044" +
    "\uff90\050\uff90\051\uff90\053\uff90\057\uff90\001\002\000\044" +
    "\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036" +
    "\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91" +
    "\050\uff91\051\uff91\053\uff91\057\uff91\001\002\000\044\030" +
    "\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f" +
    "\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\050" +
    "\uff8f\051\uff8f\053\uff8f\057\uff8f\001\002\000\044\030\uff95" +
    "\031\uff95\032\154\033\155\034\153\035\uff95\036\uff95\037" +
    "\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\050\uff95" +
    "\051\uff95\053\uff95\057\uff95\001\002\000\020\004\132\005" +
    "\126\016\130\025\102\026\127\031\125\052\141\001\002" +
    "\000\020\004\132\005\126\016\130\025\102\026\127\031" +
    "\125\052\141\001\002\000\020\004\132\005\126\016\130" +
    "\025\102\026\127\031\125\052\141\001\002\000\020\004" +
    "\132\005\126\016\130\025\102\026\127\031\125\052\141" +
    "\001\002\000\020\004\132\005\126\016\130\025\102\026" +
    "\127\031\125\052\141\001\002\000\020\004\132\005\126" +
    "\016\130\025\102\026\127\031\125\052\141\001\002\000" +
    "\016\030\150\031\151\043\uffa4\044\uffa4\050\uffa4\053\uffa4" +
    "\001\002\000\016\030\150\031\151\043\uffa7\044\uffa7\050" +
    "\uffa7\053\uffa7\001\002\000\016\030\150\031\151\043\uffa5" +
    "\044\uffa5\050\uffa5\053\uffa5\001\002\000\016\030\150\031" +
    "\151\043\uffa3\044\uffa3\050\uffa3\053\uffa3\001\002\000\016" +
    "\030\150\031\151\043\uffa6\044\uffa6\050\uffa6\053\uffa6\001" +
    "\002\000\016\030\150\031\151\043\uffa8\044\uffa8\050\uffa8" +
    "\053\uffa8\001\002\000\020\004\132\005\126\016\130\025" +
    "\102\026\127\031\125\052\141\001\002\000\012\043\uffaa" +
    "\044\uffaa\050\uffaa\053\uffaa\001\002\000\020\004\132\005" +
    "\126\016\130\025\102\026\127\031\125\052\141\001\002" +
    "\000\024\004\132\005\126\016\130\025\102\026\127\031" +
    "\125\051\uff7f\052\141\053\uff7f\001\002\000\004\025\203" +
    "\001\002\000\060\030\uff84\031\uff84\032\uff84\033\uff84\034" +
    "\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84" +
    "\043\uff84\044\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051" +
    "\uff84\052\uff84\053\uff84\056\uff84\057\uff84\060\uff84\001\002" +
    "\000\006\051\206\053\207\001\002\000\012\030\150\031" +
    "\151\051\uff81\053\uff81\001\002\000\020\004\132\005\126" +
    "\016\130\025\102\026\127\031\125\052\141\001\002\000" +
    "\044\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e" +
    "\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044" +
    "\uff8e\050\uff8e\051\uff8e\053\uff8e\057\uff8e\001\002\000\012" +
    "\030\150\031\151\051\uff80\053\uff80\001\002\000\010\030" +
    "\150\031\151\057\212\001\002\000\060\030\uff83\031\uff83" +
    "\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040" +
    "\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83" +
    "\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83\056\uff83\057" +
    "\uff83\060\uff83\001\002\000\020\004\132\005\126\016\130" +
    "\025\102\026\127\031\125\052\141\001\002\000\012\043" +
    "\176\044\uffac\050\uffac\053\uffac\001\002\000\046\030\uff89" +
    "\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037" +
    "\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\050\uff89" +
    "\051\uff89\053\uff89\056\216\057\uff89\001\002\000\020\004" +
    "\132\005\126\016\130\025\102\026\127\031\125\052\141" +
    "\001\002\000\010\030\150\031\151\057\220\001\002\000" +
    "\044\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88" +
    "\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044" +
    "\uff88\050\uff88\051\uff88\053\uff88\057\uff88\001\002\000\044" +
    "\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036" +
    "\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92" +
    "\050\uff92\051\uff92\053\uff92\057\uff92\001\002\000\032\007" +
    "\uffbf\014\uffbf\015\uffbf\017\uffbf\021\uffbf\022\uffbf\024\uffbf" +
    "\025\uffbf\054\uffbf\055\uffbf\061\uffbf\062\uffbf\001\002\000" +
    "\032\007\uffc1\014\uffc1\015\uffc1\017\uffc1\021\uffc1\022\uffc1" +
    "\024\uffc1\025\uffc1\054\uffc1\055\uffc1\061\uffc1\062\uffc1\001" +
    "\002\000\032\007\uffc0\014\uffc0\015\uffc0\017\uffc0\021\uffc0" +
    "\022\uffc0\024\uffc0\025\uffc0\054\uffc0\055\uffc0\061\uffc0\062" +
    "\uffc0\001\002\000\006\025\102\050\uffb9\001\002\000\004" +
    "\050\235\001\002\000\014\045\233\046\232\047\231\056" +
    "\200\060\202\001\002\000\004\050\uffba\001\002\000\006" +
    "\050\uffae\053\uffae\001\002\000\006\050\uffaf\053\uffaf\001" +
    "\002\000\020\004\132\005\126\016\130\025\102\026\127" +
    "\031\125\052\141\001\002\000\012\030\150\031\151\050" +
    "\uffb0\053\uffb0\001\002\000\022\004\132\005\126\016\130" +
    "\025\102\026\127\031\125\050\uffb7\052\141\001\002\000" +
    "\006\044\213\050\uffb8\001\002\000\004\050\240\001\002" +
    "\000\006\025\102\053\uffb5\001\002\000\004\053\uffb6\001" +
    "\002\000\004\053\243\001\002\000\026\007\112\015\106" +
    "\017\105\021\120\022\104\024\100\025\102\054\107\061" +
    "\077\062\113\001\002\000\032\007\uffc6\014\uffc6\015\uffc6" +
    "\017\uffc6\021\uffc6\022\uffc6\024\uffc6\025\uffc6\054\uffc6\055" +
    "\uffc6\061\uffc6\062\uffc6\001\002\000\032\007\uffbe\014\uffbe" +
    "\015\uffbe\017\uffbe\021\uffbe\022\uffbe\024\uffbe\025\uffbe\054" +
    "\uffbe\055\uffbe\061\uffbe\062\uffbe\001\002\000\020\004\132" +
    "\005\126\016\130\025\102\026\127\031\125\052\141\001" +
    "\002\000\012\030\150\031\151\051\250\053\251\001\002" +
    "\000\004\004\252\001\002\000\004\050\uff7d\001\002\000" +
    "\004\053\253\001\002\000\004\050\uff7c\001\002\000\032" +
    "\007\uffc5\014\uffc5\015\uffc5\017\uffc5\021\uffc5\022\uffc5\024" +
    "\uffc5\025\uffc5\054\uffc5\055\uffc5\061\uffc5\062\uffc5\001\002" +
    "\000\032\007\uffb1\014\uffb1\015\uffb1\017\uffb1\021\uffb1\022" +
    "\uffb1\024\uffb1\025\uffb1\054\uffb1\055\uffb1\061\uffb1\062\uffb1" +
    "\001\002\000\030\007\112\015\106\017\105\021\120\022" +
    "\104\024\100\025\102\054\107\055\257\061\077\062\113" +
    "\001\002\000\032\007\uffca\014\uffca\015\uffca\017\uffca\021" +
    "\uffca\022\uffca\024\uffca\025\uffca\054\uffca\055\uffca\061\uffca" +
    "\062\uffca\001\002\000\020\004\132\005\126\016\130\025" +
    "\102\026\127\031\125\052\141\001\002\000\004\053\262" +
    "\001\002\000\026\007\112\015\106\017\105\021\120\022" +
    "\104\024\100\025\102\054\107\061\077\062\113\001\002" +
    "\000\032\007\uffc9\014\264\015\uffc9\017\uffc9\021\uffc9\022" +
    "\uffc9\024\uffc9\025\uffc9\054\uffc9\055\uffc9\061\uffc9\062\uffc9" +
    "\001\002\000\026\007\uffbd\015\uffbd\017\uffbd\021\uffbd\022" +
    "\uffbd\024\uffbd\025\uffbd\054\uffbd\061\uffbd\062\uffbd\001\002" +
    "\000\026\007\112\015\106\017\105\021\120\022\104\024" +
    "\100\025\102\054\107\061\077\062\113\001\002\000\032" +
    "\007\uffc8\014\uffc8\015\uffc8\017\uffc8\021\uffc8\022\uffc8\024" +
    "\uffc8\025\uffc8\054\uffc8\055\uffc8\061\uffc8\062\uffc8\001\002" +
    "\000\032\007\uffc2\014\uffc2\015\uffc2\017\uffc2\021\uffc2\022" +
    "\uffc2\024\uffc2\025\uffc2\054\uffc2\055\uffc2\061\uffc2\062\uffc2" +
    "\001\002\000\010\030\150\031\151\050\271\001\002\000" +
    "\032\007\uffc3\014\uffc3\015\uffc3\017\uffc3\021\uffc3\022\uffc3" +
    "\024\uffc3\025\uffc3\054\uffc3\055\uffc3\061\uffc3\062\uffc3\001" +
    "\002\000\032\007\uffc4\014\uffc4\015\uffc4\017\uffc4\021\uffc4" +
    "\022\uffc4\024\uffc4\025\uffc4\054\uffc4\055\uffc4\061\uffc4\062" +
    "\uffc4\001\002\000\004\025\102\001\002\000\010\053\275" +
    "\056\200\060\202\001\002\000\004\050\uff7e\001\002\000" +
    "\006\050\300\051\277\001\002\000\004\025\066\001\002" +
    "\000\010\025\uffda\054\uffda\055\uffda\001\002\000\006\050" +
    "\uffd1\051\uffd1\001\002\000\004\052\ufff3\001\002\000\006" +
    "\012\uffeb\054\uffeb\001\002\000\004\025\305\001\002\000" +
    "\004\045\307\001\002\000\006\050\uffd3\051\uffd3\001\002" +
    "\000\010\004\311\005\310\026\312\001\002\000\006\050" +
    "\uffcf\051\uffcf\001\002\000\006\050\uffce\051\uffce\001\002" +
    "\000\006\050\uffd0\051\uffd0\001\002\000\016\010\uffec\011" +
    "\uffec\013\uffec\025\uffec\027\uffec\054\uffec\001\002\000\004" +
    "\054\ufff6\001\002\000\004\054\316\001\002\000\010\020" +
    "\ufff5\025\ufff5\055\ufff5\001\002\000\010\020\054\025\014" +
    "\055\320\001\002\000\016\010\ufff7\011\ufff7\013\ufff7\025" +
    "\ufff7\027\ufff7\054\ufff7\001\002\000\004\050\322\001\002" +
    "\000\010\020\ufff4\025\ufff4\055\ufff4\001\002\000\006\050" +
    "\uffd2\051\uffd2\001\002\000\004\025\305\001\002\000\016" +
    "\010\uffed\011\uffed\013\uffed\025\uffed\027\uffed\054\uffed\001" +
    "\002\000\006\050\uffd4\051\uffd4\001\002\000\010\020\054" +
    "\025\014\055\330\001\002\000\004\002\001\001\002\000" +
    "\004\054\333\001\002\000\004\054\ufffd\001\002\000\004" +
    "\025\336\001\002\000\006\051\341\055\342\001\002\000" +
    "\006\051\ufff9\055\ufff9\001\002\000\010\045\337\051\ufffc" +
    "\055\ufffc\001\002\000\004\004\340\001\002\000\006\051" +
    "\ufffb\055\ufffb\001\002\000\004\025\336\001\002\000\016" +
    "\010\ufffa\011\ufffa\013\ufffa\025\ufffa\027\ufffa\054\ufffa\001" +
    "\002\000\006\051\ufff8\055\ufff8\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\004\036\003\001\001\000\002\001\001\000" +
    "\004\046\005\001\001\000\004\035\007\001\001\000\002" +
    "\001\001\000\016\007\016\025\021\032\014\034\010\051" +
    "\015\056\020\001\001\000\002\001\001\000\004\060\330" +
    "\001\001\000\004\033\326\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\322\001\001" +
    "\000\004\053\314\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\303\001\001\000\004\044\025\001\001" +
    "\000\002\001\001\000\004\040\027\001\001\000\002\001" +
    "\001\000\010\041\033\042\030\043\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\036\062\037\001" +
    "\001\000\002\001\001\000\006\007\036\062\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\041\030\042\001\001\000\006\007\016\025\275" +
    "\001\001\000\004\061\044\001\001\000\004\033\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\050" +
    "\026\047\045\054\054\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\072\064\073" +
    "\001\001\000\002\001\001\000\004\023\055\001\001\000" +
    "\002\001\001\000\006\007\057\022\060\001\001\000\004" +
    "\024\070\001\001\000\002\001\001\000\004\007\063\001" +
    "\001\000\002\001\001\000\004\024\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\016" +
    "\025\275\001\001\000\002\001\001\000\004\021\075\001" +
    "\001\000\026\004\110\017\107\020\100\037\116\050\121" +
    "\066\114\067\122\070\115\071\120\072\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\134\004\133\005\132\006\267\037\142\001\001\000\002" +
    "\001\001\000\004\021\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\134\004\133\005\132\006" +
    "\136\011\135\012\137\013\130\037\142\063\141\001\001" +
    "\000\010\003\220\004\133\037\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\134\004\133\005\132\006" +
    "\145\037\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\110\017\107\020\144\037\116\050\121\066" +
    "\114\067\122\070\115\071\120\072\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\134\004\133\005\160\037\142\001\001\000\012\003\134" +
    "\004\133\005\151\037\142\001\001\000\002\001\001\000" +
    "\010\003\157\004\133\037\142\001\001\000\010\003\156" +
    "\004\133\037\142\001\001\000\010\003\155\004\133\037" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\134\004\133\005" +
    "\132\006\174\037\142\001\001\000\014\003\134\004\133" +
    "\005\132\006\173\037\142\001\001\000\014\003\134\004" +
    "\133\005\132\006\172\037\142\001\001\000\014\003\134" +
    "\004\133\005\132\006\171\037\142\001\001\000\014\003" +
    "\134\004\133\005\132\006\170\037\142\001\001\000\014" +
    "\003\134\004\133\005\132\006\167\037\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\134\004\133\005\132\006\136\012\176\037\142\001\001" +
    "\000\002\001\001\000\014\003\134\004\133\005\132\006" +
    "\210\037\142\001\001\000\016\003\134\004\133\005\132" +
    "\006\204\010\203\037\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\134\004\133\005\132\006\207\037\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\134\004\133\005\132\006\136\011" +
    "\213\012\137\037\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\134\004\133\005\132\006\216\037" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\226\014\225\017\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\134\004\133\005\132" +
    "\006\233\037\142\001\001\000\002\001\001\000\024\003" +
    "\134\004\133\005\132\006\136\011\135\012\137\013\235" +
    "\015\236\037\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\226\016\241\017\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\110\017\107\020" +
    "\243\037\116\050\121\066\114\067\122\070\115\071\120" +
    "\072\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\134\004\133\005\132\006\246\037\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\110\017\107\020\100\037\116\050" +
    "\121\066\114\067\122\070\115\071\120\072\113\001\001" +
    "\000\002\001\001\000\024\003\134\004\133\005\132\006" +
    "\136\011\135\012\137\013\130\037\142\063\260\001\001" +
    "\000\002\001\001\000\026\004\110\017\107\020\262\037" +
    "\116\050\121\066\114\067\122\070\115\071\120\072\113" +
    "\001\001\000\004\065\264\001\001\000\002\001\001\000" +
    "\026\004\110\017\107\020\265\037\116\050\121\066\114" +
    "\067\122\070\115\071\120\072\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\316\001" +
    "\001\000\010\007\050\045\054\054\320\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\325\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\050\026\047\045\054\054\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\055\334\057\333\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean syntaxError=false;
    @Override
    protected int error_sync_size()
    {
        return 1;
    }

    @Override
    public void syntax_error(Symbol cur_token)
    {
        syntaxError=true;
        System.err.println("Syntax error found at Line:"+((Yylex)getScanner()).getLineNo()+" Column:"+((Yylex)getScanner()).getColumn());
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        syntaxError=true;
        System.err.println("Syntax error found at Line:"+((Yylex)getScanner()).getLineNo()+" Column:"+((Yylex)getScanner()).getColumn());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // printcallw ::= PRINT LPAREN expr COMA NUMBER RPAREN 
            {
              Printcallw RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int widthleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int widthright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		int width = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new PrintCallWidth(e1, width); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*printcallw*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // printcall ::= PRINT LPAREN expr RPAREN 
            {
              Printcall RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new PrintCall(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*printcall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // readcall ::= READ LPAREN designator RPAREN 
            {
              Readcall RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ReadCall(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*readcall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // actpars ::= 
            {
              Actpars RESULT = null;
		 RESULT=new EmptyParameters(); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*actpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // actpars ::= actpars COMA expr 
            {
              Actpars RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Actpars a1 = (Actpars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Parameters(a1, e2); RESULT.setLine(a1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*actpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // actpars ::= expr 
            {
              Actpars RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Parameter(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*actpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // type ::= IDENT 
            {
              Type RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Type(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // designator ::= designator LBRACK expr RBRACK 
            {
              Designator RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new IndexDesignator(d1, e2); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // designator ::= designator DOT IDENT 
            {
              Designator RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new PathDesignator(d1, name); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // designator ::= IDENT 
            {
              Designator RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new BaseDesignator(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // factor ::= call 
            {
              Factor RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Call c1 = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new CallResult(c1); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // factor ::= LPAREN expr RPAREN 
            {
              Factor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Parenthesized(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // factor ::= NEW type LBRACK expr RBRACK 
            {
              Factor RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int countleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int countright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr count = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new NewArray(t1, count); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // factor ::= NEW type 
            {
              Factor RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NewObject(t1); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // factor ::= designator 
            {
              Factor RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleFactor(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // factor ::= BOOL 
            {
              Factor RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		boolean val = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new BooleanConstant(val); RESULT.setLine(valleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // factor ::= CHARACTER 
            {
              Factor RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new CharacterConstant(val); RESULT.setLine(valleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // factor ::= NUMBER 
            {
              Factor RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int val = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NumericConstant(val); RESULT.setLine(valleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // call ::= designator LPAREN actpars RPAREN 
            {
              Call RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Actpars a2 = (Actpars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new FuncCall(d1, a2); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*call*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // term ::= term MOD factor 
            {
              Term RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Factor f2 = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Modulus(t1, f2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // term ::= term DIVIDE factor 
            {
              Term RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Factor f2 = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Division(t1, f2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // term ::= term STAR factor 
            {
              Term RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Factor f2 = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Multiplication(t1, f2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // term ::= MINUS factor 
            {
              Term RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Factor f1 = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Negated(f1); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // term ::= factor 
            {
              Term RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Factor f1 = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleTerm(f1); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr ::= expr MINUS term 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Substraction(e1, t2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr ::= expr PLUS term 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Addition(e1, t2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr ::= term 
            {
              Expr RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleExpr(t1); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // errsep ::= COMA 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived12(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // errsep ::= IDENT 
            {
              Errsep RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ErrsepDerived11(I1); RESULT.setLine(I1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // errsep ::= 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived10(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // errsep ::= INCREMENT 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived9(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // errsep ::= DECREMENT 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived8(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // errsep ::= LESSEQUAL 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived7(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // errsep ::= LESS 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived6(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // errsep ::= GREATEREQUAL 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived5(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // errsep ::= GREATER 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived4(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // errsep ::= EQUALS 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived3(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // errsep ::= AND 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived2(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // errsep ::= OR 
            {
              Errsep RESULT = null;
		 RESULT=new ErrsepDerived1(); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*errsep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // condfactor ::= expr LESSEQUAL expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new LessEqual(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condfactor ::= expr LESS expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Less(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condfactor ::= expr GREATEREQUAL expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new GreaterEqual(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condfactor ::= expr GREATER expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Greater(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condfactor ::= expr NOTEQUALS expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NotEquals(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condfactor ::= expr EQUALS expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Equals(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condfactor ::= expr 
            {
              Condfactor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleCondFactor(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*condfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // condterm ::= condterm AND condfactor 
            {
              Condterm RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condterm c1 = (Condterm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condfactor c2 = (Condfactor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new And(c1, c2); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*condterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condterm ::= condfactor 
            {
              Condterm RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condfactor c1 = (Condfactor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleCondTerm(c1); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*condterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condexpr ::= condexpr OR condterm 
            {
              Condexpr RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condexpr c1 = (Condexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condterm c2 = (Condterm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Or(c1, c2); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*condexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condexpr ::= condterm 
            {
              Condexpr RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condterm c1 = (Condterm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new SingleCondExpr(c1); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*condexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // designatorstmt ::= designator DECREMENT 
            {
              Designatorstmt RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Decrement(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*designatorstmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // designatorstmt ::= designator INCREMENT 
            {
              Designatorstmt RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Increment(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*designatorstmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // designatorstmt ::= designator ASSIGN expr 
            {
              Designatorstmt RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Assign(d1, e2); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*designatorstmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // designatorline ::= designatorstmt SEMICOLON 
            {
              Designatorline RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Designatorstmt d1 = (Designatorstmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new DesignatorlineDerived1(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*designatorline*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statementblock ::= statementblock statement 
            {
              Statementblock RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statementblock s1 = (Statementblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new StatementBlock(s1, s2); RESULT.setLine(s1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*statementblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statementblock ::= 
            {
              Statementblock RESULT = null;
		 RESULT=new EmptyBlock(); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*statementblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // jmpcond ::= condexpr 
            {
              Jmpcond RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condexpr cond = (Condexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new JmpCond(cond); RESULT.setLine(condleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*jmpcond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // for3 ::= 
            {
              For3 RESULT = null;
		 RESULT=new ForIncrementEmpty(); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*for3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // for3 ::= designatorstmt 
            {
              For3 RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Designatorstmt d1 = (Designatorstmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ForIncrement(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*for3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // for2 ::= 
            {
              For2 RESULT = null;
		 RESULT=new ForCondEmpty(); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*for2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // for2 ::= condexpr 
            {
              For2 RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condexpr c1 = (Condexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ForCond(c1); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*for2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // for1 ::= 
            {
              For1 RESULT = null;
		 RESULT=new ForInitEmpty(); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*for1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // for1 ::= designatorstmt 
            {
              For1 RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Designatorstmt d1 = (Designatorstmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ForInit(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*for1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // forwrapper ::= FOR 
            {
              Forwrapper RESULT = null;
		 RESULT=new ForWrapper(); 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*forwrapper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // whilewrapper ::= WHILE 
            {
              Whilewrapper RESULT = null;
		 RESULT=new WhileWrapper(); 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*whilewrapper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // elsewrapper ::= ELSE 
            {
              Elsewrapper RESULT = null;
		 RESULT=new ElseWrapper(); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*elsewrapper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= printcallw SEMICOLON 
            {
              Statement RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Printcallw p1 = (Printcallw)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new PrintStatementW(p1); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= printcall SEMICOLON 
            {
              Statement RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Printcall p1 = (Printcall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new PrintStatement(p1); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= readcall SEMICOLON 
            {
              Statement RESULT = null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Readcall r1 = (Readcall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ReadStatement(r1); RESULT.setLine(r1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= call SEMICOLON 
            {
              Statement RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Call c1 = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new CallStatement(c1); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= RETURN SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new EmptyReturn(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= RETURN expr SEMICOLON 
            {
              Statement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Return(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= CONTINUE SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new Continue(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= BREAK SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new Break(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= forwrapper LPAREN for1 SEMICOLON for2 SEMICOLON for3 RPAREN statement 
            {
              Statement RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Forwrapper f1 = (Forwrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		For1 f2 = (For1)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int f3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int f3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		For2 f3 = (For2)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int f4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		For3 f4 = (For3)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s5 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ForLoop(f1, f2, f3, f4, s5); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= whilewrapper LPAREN jmpcond RPAREN statement 
            {
              Statement RESULT = null;
		int w1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Whilewrapper w1 = (Whilewrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Jmpcond cond = (Jmpcond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new While(w1, cond, s2); RESULT.setLine(w1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= IF LPAREN jmpcond RPAREN statement elsewrapper statement 
            {
              Statement RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Jmpcond cond = (Jmpcond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Elsewrapper e2 = (Elsewrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s3 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new IfElse(cond, s1, e2, s3); RESULT.setLine(condleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= IF LPAREN jmpcond RPAREN statement 
            {
              Statement RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Jmpcond cond = (Jmpcond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new If(cond, s1); RESULT.setLine(condleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= LBRACE statementblock RBRACE 
            {
              Statement RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statementblock s1 = (Statementblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Block(s1); RESULT.setLine(s1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= designatorline 
            {
              Statement RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Designatorline d1 = (Designatorline)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new DesignatorLineStmt(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // namedeclaration ::= IDENT LBRACK RBRACK 
            {
              Namedeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new Array(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*namedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // namedeclaration ::= IDENT 
            {
              Namedeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Variable(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*namedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // constnamedeclaration ::= IDENT ASSIGN NUMBER 
            {
              Constnamedeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int val = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NumberConstantDeclaration(name, val); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*constnamedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // constnamedeclaration ::= IDENT ASSIGN CHARACTER 
            {
              Constnamedeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new CharConstantDeclaration(name, val); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*constnamedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // constnamedeclaration ::= IDENT ASSIGN BOOL 
            {
              Constnamedeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		boolean val = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new BoolConstantDeclaration(name, val); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*constnamedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variabledeclaration ::= variabledeclaration COMA namedeclaration 
            {
              Variabledeclaration RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variabledeclaration v1 = (Variabledeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Namedeclaration n2 = (Namedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new VariabledeclarationDerived2(v1, n2); RESULT.setLine(v1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*variabledeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variabledeclaration ::= type namedeclaration 
            {
              Variabledeclaration RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Namedeclaration n2 = (Namedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new VariabledeclarationDerived1(t1, n2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*variabledeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // constantdeclaration ::= CONST type constnamedeclaration 
            {
              Constantdeclaration RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Constnamedeclaration c2 = (Constnamedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ConstantDeclarationTyped(t1, c2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*constantdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // constantdeclaration ::= constantdeclaration COMA constnamedeclaration 
            {
              Constantdeclaration RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Constantdeclaration c1 = (Constantdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Constnamedeclaration c2 = (Constnamedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ConstantDeclarations(c1, c2); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*constantdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // formpars ::= 
            {
              Formpars RESULT = null;
		 RESULT=new FormparsDerived3(); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*formpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // formpars ::= type namedeclaration 
            {
              Formpars RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Namedeclaration n2 = (Namedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FormparsDerived2(t1, n2); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*formpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // formpars ::= formpars COMA type namedeclaration 
            {
              Formpars RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Formpars f1 = (Formpars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Namedeclaration n3 = (Namedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FormparsDerived1(f1, t2, n3); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*formpars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // formparswrapper ::= LPAREN formpars RPAREN 
            {
              Formparswrapper RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formpars f1 = (Formpars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new FormParsWrapper(f1); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*formparswrapper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declarationblock ::= 
            {
              Declarationblock RESULT = null;
		 RESULT=new EmptyDeclarationBlock(); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*declarationblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declarationblock ::= declarationblock variabledeclaration SEMICOLON 
            {
              Declarationblock RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declarationblock d1 = (Declarationblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variabledeclaration v2 = (Variabledeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new DeclarationBlock(d1, v2); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*declarationblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declarationblockwrapper ::= declarationblock 
            {
              Declarationblockwrapper RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Declarationblock d1 = (Declarationblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new DeclarationBlockWrapper1(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*declarationblockwrapper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // functiondeclarationblock ::= declarationblock 
            {
              Functiondeclarationblock RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Declarationblock d1 = (Declarationblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FunctionDeclarationBlock(d1); RESULT.setLine(d1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*functiondeclarationblock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function ::= functionheader functiondeclarationblock LBRACE statementblock RBRACE 
            {
              Function RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Functionheader f1 = (Functionheader)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Functiondeclarationblock f2 = (Functiondeclarationblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statementblock s3 = (Statementblock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Function(f1, f2, s3); RESULT.setLine(f1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*function*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // functionheader ::= functionname formparswrapper 
            {
              Functionheader RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Functionname name = (Functionname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Formparswrapper f1 = (Formparswrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FuncHeader(name, f1); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*functionheader*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // codebody ::= codebody function 
            {
              Codebody RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Codebody c1 = (Codebody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Function f2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new CodebodyDerived2(c1, f2); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*codebody*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // codebody ::= 
            {
              Codebody RESULT = null;
		 RESULT=new CodebodyDerived1(); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*codebody*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // classcodebody ::= 
            {
              Classcodebody RESULT = null;
		 RESULT=new ClasscodebodyDerived2(); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*classcodebody*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // classcodebody ::= LBRACE codebody RBRACE 
            {
              Classcodebody RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Codebody c1 = (Codebody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ClasscodebodyDerived1(c1); RESULT.setLine(c1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*classcodebody*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // classdeclaration ::= CLASS classname extendsdeclaration implementsdeclaration LBRACE declarationblockwrapper classcodebody RBRACE 
            {
              Classdeclaration RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Classname name = (Classname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Extendsdeclaration e1 = (Extendsdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Implementsdeclaration i2 = (Implementsdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int d3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declarationblockwrapper d3 = (Declarationblockwrapper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Classcodebody c4 = (Classcodebody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Class(name, e1, i2, d3, c4); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*classdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // implementedname ::= type 
            {
              Implementedname RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ImplementedName(t1); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*implementedname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nonemptyimplementsdeclaration ::= nonemptyimplementsdeclaration COMA implementedname 
            {
              Nonemptyimplementsdeclaration RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nonemptyimplementsdeclaration n1 = (Nonemptyimplementsdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Implementedname i2 = (Implementedname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NonemptyimplementsdeclarationDerived2(n1, i2); RESULT.setLine(n1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*nonemptyimplementsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nonemptyimplementsdeclaration ::= IMPLEMENTS implementedname 
            {
              Nonemptyimplementsdeclaration RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Implementedname i1 = (Implementedname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NonemptyimplementsdeclarationDerived1(i1); RESULT.setLine(i1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*nonemptyimplementsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // emptyimplementsdeclaration ::= 
            {
              Emptyimplementsdeclaration RESULT = null;
		 RESULT=new EmptyimplementsdeclarationDerived1(); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*emptyimplementsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // implementsdeclaration ::= emptyimplementsdeclaration 
            {
              Implementsdeclaration RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Emptyimplementsdeclaration e1 = (Emptyimplementsdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ImplementsdeclarationDerived2(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*implementsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // implementsdeclaration ::= nonemptyimplementsdeclaration 
            {
              Implementsdeclaration RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Nonemptyimplementsdeclaration n1 = (Nonemptyimplementsdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ImplementsdeclarationDerived1(n1); RESULT.setLine(n1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*implementsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // extendsdeclaration ::= 
            {
              Extendsdeclaration RESULT = null;
		 RESULT=new EmptyExtendsDeclaration(); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*extendsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // extendsdeclaration ::= EXTENDS IDENT 
            {
              Extendsdeclaration RESULT = null;
		int baseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String base = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ExtendsDeclaration(base); RESULT.setLine(baseleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*extendsdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // programdeclarations ::= programdeclarations variabledeclaration SEMICOLON 
            {
              Programdeclarations RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variabledeclaration v2 = (Variabledeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ProgramdeclarationsDerived6(p1, v2); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // programdeclarations ::= programdeclarations constantdeclaration SEMICOLON 
            {
              Programdeclarations RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Constantdeclaration c2 = (Constantdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ProgramdeclarationsDerived5(p1, c2); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // programdeclarations ::= programdeclarations enumdeclaration 
            {
              Programdeclarations RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Enumdeclaration e2 = (Enumdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ProgramdeclarationsDerived4(p1, e2); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // programdeclarations ::= programdeclarations interfacedeclaration 
            {
              Programdeclarations RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Interfacedeclaration i2 = (Interfacedeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ProgramdeclarationsDerived3(p1, i2); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // programdeclarations ::= programdeclarations classdeclaration 
            {
              Programdeclarations RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Classdeclaration c2 = (Classdeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ProgramdeclarationsDerived2(p1, c2); RESULT.setLine(p1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // programdeclarations ::= 
            {
              Programdeclarations RESULT = null;
		 RESULT=new ProgramdeclarationsDerived1(); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*programdeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // functionname ::= VOID IDENT 
            {
              Functionname RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ProcedureName(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*functionname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // functionname ::= type IDENT 
            {
              Functionname RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FunctionName(t1, name); RESULT.setLine(t1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*functionname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // interfaceinner ::= interfaceinner functionheader SEMICOLON 
            {
              Interfaceinner RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Interfaceinner i1 = (Interfaceinner)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Functionheader f2 = (Functionheader)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new InterfaceMethodDeclaration(i1, f2); RESULT.setLine(i1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*interfaceinner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // interfaceinner ::= 
            {
              Interfaceinner RESULT = null;
		 RESULT=new EmptyInterfaceInner(); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*interfaceinner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // interfacename ::= IDENT 
            {
              Interfacename RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new InterfaceName(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*interfacename*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // interfacedeclaration ::= INTERFACE interfacename LBRACE interfaceinner RBRACE 
            {
              Interfacedeclaration RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Interfacename i1 = (Interfacename)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Interfaceinner i2 = (Interfaceinner)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new InterfaceDeclaration(i1, i2); RESULT.setLine(i1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*interfacedeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // enuminner ::= enuminner COMA enumconstant 
            {
              Enuminner RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Enuminner e1 = (Enuminner)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Enumconstant e2 = (Enumconstant)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new EnuminnerDerived2(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*enuminner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // enuminner ::= enumconstant 
            {
              Enuminner RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Enumconstant e1 = (Enumconstant)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new EnuminnerDerived1(e1); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*enuminner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // enumdeclaration ::= ENUM enumname LBRACE enuminner RBRACE 
            {
              Enumdeclaration RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Enumname e1 = (Enumname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Enuminner e2 = (Enuminner)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new EnumDeclaration(e1, e2); RESULT.setLine(e1left); 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*enumdeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // enumconstant ::= IDENT ASSIGN NUMBER 
            {
              Enumconstant RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int value = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new NumberedEnumConstant(name, value); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*enumconstant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // enumconstant ::= IDENT 
            {
              Enumconstant RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new EnumConstant(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*enumconstant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // enumname ::= IDENT 
            {
              Enumname RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new EnumName(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*enumname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classname ::= IDENT 
            {
              Classname RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ClassName(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*classname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programname ::= IDENT 
            {
              Programname RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ProgramName(name); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*programname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM programname programdeclarations LBRACE codebody RBRACE 
            {
              Program RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Programname name = (Programname)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Programdeclarations p1 = (Programdeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Codebody c2 = (Codebody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new ProgramDerived1(name, p1, c2); RESULT.setLine(nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

